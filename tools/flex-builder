#!/bin/bash

# Copyright 2017-2019 NXP
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Author: Shengzhou Liu <shengzhou.liu@nxp.com>
#

set -e

# set default env
JOBS=16
ARCH=arm64
FBVERSION=2.3.1909

usage () {
cat <<EOF

Usage: flex-builder [-c <component>]   [-m <machine>] [-a <arch>] [-b <boottype>]
   or: flex-builder [-i <instruction>] [-m <machine>] [-a <arch>] [-b <boottype>]

Most used example with autobuild:
 flex-builder -m ls1046ardb -a arm64	     # auto build all firmware, linux, apps components and LSDK userland for ls1046ardb
 flex-builder -i auto -a arm64	             # auto build all firmware, linux, apps components and LSDK userland for all arm64 machines

Most used example with separate command:
 flex-builder -i mkrfs    	             # generate Ubuntu main arm64 userland by default
 flex-builder -i mkrfs -r ubuntu:mate        # generate Ubuntu-Mate arm64 GUI desktop userland
 flex-builder -i mkrfs -r yocto:tiny         # generate Yocto-base arm64 tiny userland
 flex-builder -i mkrfs -r centos             # generat CentOS arm64 userland
 flex-builder -i mklinux -a arm64            # generate lsdk_linux_arm64_LS_tiny.itb including rootfs_yocto_arm64_tiny.cpio.gz
 flex-builder -c linux -a arm64	             # build linux component with default linux repo and default branch/tag for all arm64 machines
 flex-builder -c atf -m ls1046ardb -b sd     # build ATF images for SD boot on LS1046ardb
 flex-builder -i mkfw -m ls1046ardb -b sd    # generate composite firmware for SD boot on ls1046ardb
 flex-builder -i mkbootpartition -a arm64    # generate boot partition tarball appliable for a variety of userland used on arm64 platforms
 flex-builder -c apps -a arm64	             # buld all apps components (dpdk, fmc, restool, optee_os, secure_obj, edgescale, etc) for arm64
 flex-builder -i merge-component -a arm64    # merge all components packages and kernel modules into target userland
 flex-builder -i packrfs -a arm64	     # pack and compress target userland as .tgz
 flex-builder -i download -m ls1043ardb      # download prebuilt userland
 flex-builder -i list			     # show the list of enabled config, machines and components
 flex-builder -i repo-fetch		     # fetch all git repositories of components from remote repos if not exist locally
 flex-builder -i repo-update		     # update all components to the latest TOP commmits of current branches
 flex-builder docker			     # create or attach to Ubuntu docker container to run Flexbuild in docker
 flex-builder clean			     # clean all previously generated images except distro rootfs, optionally

Most used options:
 -m, --machine	       target machine, supports ls1012afrwy,ls1021atwr,ls1028ardb,ls1043ardb,ls1046ardb,ls1088ardb_pb,ls2088ardb,lx2160ardb, etc
 -a, --arch	       target arch of processor, valid argument: arm64, arm64:be, arm32, arm32:be, ppc64, ppc32, arm64 by default
 -b, --boottype	       type of boot media, valid argument: nor, sd, emmc, qspi, xspi, nand, default all types if unspecified
 -c, --component       component to be built, valid argument: firmware, apps, linux, uboot, atf, rcw, mc_utils, restool,
		       edgescale, fmc, openssl, vpp, dpdk, ovs_dpdk, pktgen_dpdk, openstack_nova, optee_os, libpkcs11, secure_obj, etc
 -r, --rootfs          specify flavor of target rootfs, valid argument: ubuntu|yocto|centos:main|devel|lite|tiny|edgescale|cloud
 -i, --instruction     instruction to do for dedicated operation
 -s, --secure	       enable security feature in case of secure boot

See docs/flexbuild_usage.txt and docs/lsdk_build_install.txt for more information about the available commands.

EOF
   exit
}


check_build_toolchain() {
    if [ $DESTARCH = arm32 ] && [ $hostarch = x86_64 -o $hostarch = aarch64 -o $hostarch = i686 ]; then
	if ! which arm-linux-gnueabihf-gcc 1>/dev/null; then
	    sudo apt-get install -y crossbuild-essential-armhf gcc-arm-linux-gnueabihf cpp-arm-linux-gnueabihf g++-arm-linux-gnueabihf
	fi
	export ARCH=arm
	export CROSS_COMPILE=arm-linux-gnueabihf-
    elif [ $DESTARCH = arm64 ] && [ $hostarch = x86_64 -o $hostarch = armv7l -o $hostarch = i686 ]; then
	if ! which aarch64-linux-gnu-gcc 1>/dev/null; then
	    sudo apt-get install -y crossbuild-essential-arm64 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
	fi
	export ARCH=arm64
	export CROSS_COMPILE=aarch64-linux-gnu-
    elif [ $DESTARCH = ppc32 ] && [ $hostarch = x86_64 -o $hostarch = i686 ]; then
	if [ ! -f ${RFSDIR%/*}/host/bin/powerpc-linux-gcc ]; then
	    echo Building powerpc-linux-gcc toolchain ...
	    build_distro_rfs_buildroot toolchain ppc32
	fi
	export PATH=${RFSDIR%/*}/host/bin:$PATH
	export ARCH=powerpc
	export CROSS_COMPILE=powerpc-linux-
    elif [ $DESTARCH = ppc64 ] && [ $hostarch = x86_64 -o $hostarch = i686 ]; then
	if [ ! -f ${RFSDIR%/*}/host/bin/powerpc64-linux-gcc ]; then
	    echo Building powerpc64-linux-gcc toolchain ...
	    build_distro_rfs_buildroot toolchain ppc64
	fi
	export PATH=${RFSDIR%/*}/host/bin:$PATH
	export ARCH=powerpc
	export CROSS_COMPILE=powerpc64-linux-
    elif [ $hostarch = aarch64 -o $hostarch = armv7l ]; then
	if [ $DESTARCH = arm32 ]; then
	    export ARCH=arm
	elif [ $DESTARCH = arm64 ]; then
	    export ARCH=arm64
	elif [ $DESTARCH = ppc64 ]; then
	    export ARCH=powerpc
	fi
	export CROSS_COMPILE=
    fi
}


generate_qoriq_composite_firmware() {
    # generate machine-specific firmware to be programmed to NOR/SD media
    # $1: machine name
    # $2: boot type: sd, qspi, xspi, nor, nand
    # $3: bootloader type: uboot or uefi

    [ ! -f $FBDIR/configs/board/$1/manifest ] && echo $FBDIR/configs/board/$1/manifest not exist! && exit 1
    . $FBDIR/configs/board/$1/manifest

    if [ "$SECURE" = "y" ]; then
	fwimg=$FBDIR/build/images/firmware_${1}_${3}_${BOOTTYPE}boot_secure
	rcwimg=`eval echo '${'"rcw_""$2"'_sec}'`
	bootloaderimg=`eval echo '${'"$3"'_'"$2"'boot_sec}'`
	bl2img=`eval echo '${'"atf_bl2_""$2"'_sec}'`
	fipimg=`eval echo '${'"atf_fip_""$3"'_sec}'`
    else
	fwimg=$FBDIR/build/images/firmware_${1}_${3}_${BOOTTYPE}boot
	rcwimg=`eval echo '${'"rcw_""$2"'}'`
	bootloaderimg=`eval echo '${'"$3"'_'"$2"'boot}'`
	bl2img=`eval echo '${'"atf_bl2_""$2"'}'`
	fipimg=`eval echo '${'"atf_fip_""$3"'}'`
    fi
    [ -f $fwimg ] && rm -f $fwimg

    if [ -z "$bootloaderimg" -a $1 = ls1021atwr ] || [ -z "$bl2img" -a $1 != ls1021atwr ] || \
       [ -z "$bootloaderimg" -a $3 = uefi ] || [ -z "$rcwimg" -a $1 = ls1021atwr -a "$SECURE" != "y" ]; then
	[ "$SECURE" = "y" ] && echo ${3}_${2}boot_sec on $1: unsupported! || echo ${3}_${2}boot on $1: unsupported!
	exit
    fi

    if [ -n "$fipimg" -a -n "$bl2img" ]; then
	if [ ! -f $bl2img -o ! -f $fipimg ] || \
	   `cd $FBDIR/packages/firmware/atf && git status -s|grep -qiE 'M|A|D' && cd - 1>/dev/null`; then
	    [ "$SECURE" = "y" ] && flex-builder -c atf -m $1 -b $2 -s -f $CONFIGLIST || flex-builder -c atf -m $1 -b $2 -f $CONFIGLIST
	fi
    fi
    if [ ! -f $fipimg ] || [ ! -f $bl2img ]; then
	echo ${3} ${2}boot on $1 is not supported! && exit
    fi

    echo "Generating $2boot composite firmware image for $1 ..."
    [ -n "$rcwimg" -a ! -f $rcwimg ] && flex-builder -c rcw -m $1 -f $CONFIGLIST

    if [ $1 = ls1021atwr -a -n "$bootloaderimg" ] && [ ! -f $FBDIR/$bootloaderimg ]; then
	echo $bootloaderimg not exist, generating it ...
	flex-builder -c uboot -m $1 -b $2 -f $CONFIGLIST
    fi

    if [ "$fman_ucode" != null -a -n "$fman_ucode" ]; then
	test -f $FBDIR/$fman_ucode || flex-builder -c fm_ucode -f $CONFIGLIST
    fi
    if [ "$qe_firmware" != null -a -n "$qe_firmware" ] ; then
	test -f $FBDIR/$qe_firmware || flex-builder -c qe_ucode -f $CONFIGLIST
    fi
    if [ "$dp_firmware" != null -a -n "$dp_firmware" ] ; then
	test -f $FBDIR/$dp_firmware || flex-builder -c dp_firmware_cadence -f $CONFIGLIST
    fi
    if [ "$phy_firmware" != null -a -n "$phy_firmware" ] ; then
	test -f $FBDIR/$phy_firmware || flex-builder -c bin_firmware -f $CONFIGLIST
    fi

    [ -f $FBDIR/$kernel_img ] || generate_kernel_img

    if [ "$kernelrfs_continuous" = y ]; then
	kernel_itb=$FBDIR/build/images/lsdk_linux_${DESTARCH}_${SOCFAMILY}_tiny.itb
	if [ ! -f ${kernel_itb} ]; then
	    echo ${kernel_itb} not exist, generating it ...
	    flex-builder -i mklinux -r yocto:tiny -a $DESTARCH -p $SOCFAMILY -f $CONFIGLIST
	fi
    fi

    [ -f $FBDIR/$distro_bootscript ] ||	flex-builder -i mkdistroscr -m $1 -a $DESTARCH -f $CONFIGLIST
    [ "$IMA_EVM" = y -a ! -f $FBDIR/$bootscript_enforce ] && flex-builder -i mkdistroscr -m $1 -a $DESTARCH -t -f $CONFIGLIST

    secureboot_headers=`eval echo '${'"secureboot_headers_""$2"'}'`
    if [ "$SECURE" = y -a $SOCFAMILY = LS ] && [ "$secureboot_headers" != null -a -n "$secureboot_headers" ]; then
	# sign images
	if [ "$IMA_EVM" = y ]; then
	    flex-builder -i signimg -m $1 -b $2 -a $DESTARCH -t -f $CONFIGLIST
	else
	    flex-builder -i signimg -m $1 -b $2 -a $DESTARCH -f $CONFIGLIST
	fi
    fi

    if [ $1 = ls1021atwr ]; then
	# for machine which doesn't support ATF
	if [ $2 = sd -o $2 = emmc ]; then
	    # rcw and uboot/uefi in single image
	    dd if=$FBDIR/$bootloaderimg of=$fwimg bs=512 seek=$sd_rcw_bootloader_offset
	else
	    # program rcw
	    if [ -z "$rcwimg" ]; then echo ${3} ${2}boot on $1 is not supported!; exit; fi
	    dd if=$FBDIR/$rcwimg of=$fwimg bs=1K seek=0
	    # program u-boot image
	    val=`expr $(echo $(($nor_bootloader_offset))) / 1024`
	    dd if=$FBDIR/$bootloaderimg of=$fwimg bs=1K seek=$val
	fi
    else
	# ATF BL2 image
	if [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$bl2img of=$fwimg bs=512 seek=$sd_rcw_bootloader_offset
	else
	    dd if=$FBDIR/$bl2img of=$fwimg bs=1K seek=0
	fi

	# ATF FIP image
	if [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$fipimg of=$fwimg bs=512 seek=$sd_bootloader_offset
	else
	    val=`expr $(echo $(($nor_bootloader_offset))) / 1024`
	    dd if=$FBDIR/$fipimg of=$fwimg bs=1K seek=$val
	fi
    fi

    # bootloader environment varialbe
    if [ $3 = uefi ]; then
	if [ "$uefi_env" != "null" -a -n "$uefi_env" ]; then
	    if [ $2 = nor -o $2 = qspi -o $2 = xspi ]; then
		val=`expr $(echo $(($nor_bootloader_env_offset))) / 1024`
		dd if=$FBDIR/$uefi_env of=$fwimg bs=1K seek=$val
	    elif [ $2 = sd -o $2 = emmc ]; then
		dd if=$FBDIR/$uefi_env of=$fwimg bs=512 seek=$sd_bootloader_env_offset
	    fi
	fi
    fi

    # secure boot headers
    if [ "$secureboot_headers" != null -a -n "$secureboot_headers" ] && [ "$SECURE" = "y" ]; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_secureboot_headers_offset))) / 1024`
	    dd if=$FBDIR/$secureboot_headers of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$secureboot_headers of=$fwimg bs=512 seek=$sd_secureboot_headers_offset
	fi
    fi

    # DDR PHY firmware
    if [ $1 = lx2160ardb -o $1 = lx2160aqds ]; then
	if [ "$SECURE" = "y" -a ! -f $ddr_phy_fw_sec ]; then
	    flex-builder -c atf -m $1 -b $2 -s -f $CONFIGLIST
	elif [ ! -f $ddr_phy_fw ]; then
	    flex-builder -c ddr_phy_bin -f $CONFIGLIST
	fi
	[ "$SECURE" = y ] && ddrphyfw=$ddr_phy_fw_sec || ddrphyfw=$ddr_phy_fw
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_ddr_phy_fw_offset))) / 1024`
	    dd if=$FBDIR/$ddrphyfw of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$ddrphyfw of=$fwimg bs=512 seek=$sd_ddr_phy_fw_offset
	fi
    fi

    # fuse provisioning in case CONFIG_FUSE_PROVISIONING is enabled
    if [ "$CONFIG_FUSE_PROVISIONING" = "y" -a $1 != ls1021atwr ]; then
	if [ "$SECURE" = "y" ]; then
	    fuse_header=build/firmware/atf/$1/fuse_fip_sec.bin
	else
	    fuse_header=build/firmware/atf/$1/fuse_fip.bin
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_fuse_headers_offset))) / 1024`
	    dd if=$FBDIR/$fuse_header of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$fuse_header of=$fwimg bs=512 seek=$sd_fuse_headers_offset
	fi
    fi

    # DPAA1 FMan ucode firmware
    if [ "$fman_ucode" != "null" -a -n "$fman_ucode" ]; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_fman_ucode_offset))) / 1024`
	    dd if=$FBDIR/$fman_ucode of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$fman_ucode of=$fwimg bs=512 seek=$sd_fman_ucode_offset
	fi
    fi

    # QE/uQE firmware
    if [ "$qe_firmware" != "null" -a -n "$qe_firmware" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_qe_firmware_offset))) / 1024`
	    dd if=$FBDIR/$qe_firmware of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$qe_firmware of=$fwimg bs=512 seek=$sd_qe_firmware_offset
	fi
    fi

    # DP (Display Port) firmware
    if [ -n "$dp_firmware" ] && [ -f $FBDIR/$dp_firmware ] && [ ${1:0:7} = ls1028a ]; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	   val=`expr $(echo $(($nor_dp_firmware_offset))) / 1024`
	   dd if=$FBDIR/$dp_firmware of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	   dd if=$FBDIR/$dp_firmware of=$fwimg bs=512 seek=$sd_dp_firmware_offset
	fi
    fi

    # ethernet phy firmware
    if [ "$phy_firmware" != "null" -a -n "$phy_firmware" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_phy_firmware_offset))) / 1024`
	    dd if=$FBDIR/$phy_firmware of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$phy_firmware of=$fwimg bs=512 seek=$sd_phy_firmware_offset
	fi
    fi

    # flashing image script
    if [ ! -f $FBDIR/build/images/flash_images.scr ] ; then
	mkimage -T script -C none -d $FBDIR/tools/flash_images.sh $FBDIR/build/images/flash_images.scr
    fi
    if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	val=`expr $(echo $(($nor_uboot_scr_offset))) / 1024`
	dd if=$FBDIR/build/images/flash_images.scr of=$fwimg bs=1K seek=$val
    elif [ $2 = sd -o $2 = emmc ]; then
	dd if=$FBDIR/build/images/flash_images.scr of=$fwimg bs=512 seek=$sd_uboot_scr_offset
    fi

    # DPAA2-MC or PFE firmware
    if [ "$dpaa2_mc_fw" != "null" -a -n "$dpaa2_mc_fw" ] ; then
	test -d $FBDIR/build/firmware/mc_bin || flex-builder -c mc_bin -f $CONFIGLIST
	fwbin=`ls $FBDIR/$dpaa2_mc_fw`
    elif [ "$pfe_fw" != "null" -a -n "$pfe_fw" ] ; then
	fwbin=$FBDIR/$pfe_fw
	[ -f $FBDIR/$pfe_fw ] || flex-builder -c pfe_bin -f $CONFIGLIST
    fi
    if [ -n "$fwbin" ]; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_dpaa2_mc_fw_offset))) / 1024`
	    dd if=$fwbin of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$fwbin of=$fwimg bs=512 seek=$sd_dpaa2_mc_fw_offset
	fi
    fi

    # DPAA2 DPL firmware
    if [ "$dpaa2_mc_dpl" != "null" -a -n "$dpaa2_mc_dpl" ] ; then
	if [ ! -f $FBDIR/$dpaa2_mc_dpl ]; then
	    flex-builder -c mc_utils -f $CONFIGLIST
	fi
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_dpaa2_mc_dpl_offset))) / 1024`
	    dd if=$FBDIR/$dpaa2_mc_dpl of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$dpaa2_mc_dpl of=$fwimg bs=512 seek=$sd_dpaa2_mc_dpl_offset
	fi
    fi

    # DPAA2 DPC firmware
    if [ "$dpaa2_mc_dpc" != "null" -a -n "$dpaa2_mc_dpc" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_dpaa2_mc_dpc_offset))) / 1024`
	    dd if=$FBDIR/$dpaa2_mc_dpc of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$dpaa2_mc_dpc of=$fwimg bs=512 seek=$sd_dpaa2_mc_dpc_offset
	fi
    fi

    # device tree image
    if [ "$device_tree" != "null" -a -n "$device_tree" ] ; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_device_tree_offset))) / 1024`
	    dd if=$FBDIR/$device_tree of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$device_tree of=$fwimg bs=512 seek=$sd_device_tree_offset
	fi
    fi

    # linux kernel image
    if [ "$kernelrfs_continuous" != "y" ]; then
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_kernel_offset))) / 1024`
	    dd if=$FBDIR/$kernel_img of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$kernel_img of=$fwimg bs=512 seek=$sd_kernel_offset
	fi
    else
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_kernel_offset))) / 1024`
	    [ $2 != qspi -o $1 != ls1021atwr ] && dd if=${kernel_itb} of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=${kernel_itb} of=$fwimg bs=512 seek=$sd_kernel_offset
	fi
    fi

    # initrd image
    if [ "$kernelrfs_continuous" != "y" ]; then
	[ ! -f $FBDIR/$initrdrfs ] && flex-builder -c initrd -a $DESTARCH -f $CONFIGLIST && \
	mkimage -A arm -O linux -T ramdisk -C gzip -d $FBDIR/$initrdrfs $FBDIR/$initrdrfs.uboot
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor_initrdrfs_offset))) / 1024`
	    dd if=$FBDIR/$initrdrfs of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$initrdrfs of=$fwimg bs=512 seek=$sd_initrdrfs_offset
	fi
    fi

    [ $2 = sd -o $2 = emmc ] && tail -c +4097 $fwimg > $fwimg.img && rm $fwimg || mv $fwimg $fwimg.img
    echo -e "${GREEN} $fwimg.img   [Done]\n${NC}"
}

generate_imx_composite_firmware() {
    # $1: machine name
    echo "Generating composite firmware for $1 ..."
    [ ! -f $FBDIR/configs/board/$1/manifest ] && echo $FBDIR/configs/board/$1/manifest not exist! && exit 1
    . $FBDIR/configs/board/$1/manifest
    fwimg=$FBDIR/build/images/firmware_${1}
    [ -f $fwimg ] && rm -f $fwimg
    bootloaderimg=${uboot_img}

    if [ -n "$bootloaderimg" -a ! -f $FBDIR/$bootloaderimg ]; then
	echo $bootloaderimg not exist, generating it ...
	flex-builder -c uboot -m $1 -f $CONFIGLIST
    fi
    if [ -n "$linux_itb" -a ! -f $FBDIR/${linux_itb} ]; then
	echo $linux_itb not exist, generating it ...
	flex-builder -i mklinux -r yocto:tiny -a $DESTARCH -p IMX -f $CONFIGLIST
    fi

    # bootloader
    if echo $1 | grep -E ^imx8 1>/dev/null; then
      dd if=$FBDIR/$bootloaderimg of=$fwimg bs=512 seek=$imx8_bootloader_offset
    else
      dd if=$FBDIR/$bootloaderimg of=$fwimg bs=512 seek=$imx_bootloader_offset
    fi 

    # linux itb image
    dd if=${linux_itb} of=$fwimg bs=512 seek=$imx_itb_offset

    tail -c +0 $fwimg > $fwimg.img && rm $fwimg

    echo -e "${GREEN} $fwimg.img   [Done]\n${NC}"
}

generate_linux_itb() {
    [ $DISTROTYPE != buildroot -a $DISTROTYPE != yocto ] && echo "Using yocto-based initrd by default" && DISTROTYPE=yocto
    [ "$DISTROSCALE" != tiny -a "$DISTROSCALE" != devel ] && DISTROSCALE=tiny

    if [ $DESTARCH = arm64 ]; then
	kimgname=Image
    elif [ $DESTARCH = arm32 -a $SOCFAMILY = LS ]; then
	kimgname=uImage
    elif [ $DESTARCH = arm32 -a $SOCFAMILY = IMX ]; then
	kimgname=zImage
    elif [ $DESTARCH = ppc64 ]; then
	kimgname=Image.gz
    fi
    kernelimgdir=$FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/$kimgname
    [ ! -f $kernelimgdir ] && echo building dependent $kernelimgdir && \
    flex-builder -c linux -a ${DESTARCH}${endianstr} -p $SOCFAMILY -f $CONFIGLIST

    [ $DISTROSCALE = tiny -a -z "$endiantype" -a \
      ! -f $FBDIR/packages/rfs/initrd/rootfs_${DISTROTYPE}_${DESTARCH}${endiantype}_$DISTROSCALE.cpio.gz ] && \
    flex-builder -c initrd -a $DESTARCH -f $CONFIGLIST

    [ ! -f $FBDIR/packages/rfs/initrd/rootfs_${DISTROTYPE}_${DESTARCH}${endiantype}_$DISTROSCALE.cpio.gz ] && \
    flex-builder -i mkrfs -r ${DISTROTYPE}:${DISTROSCALE} -a ${DESTARCH}$endiantype -p $SOCFAMILY -f $CONFIGLIST

    tmpits=$FBDIR/configs/linux/linux_${DESTARCH}${endiantype}_${SOCFAMILY}_$DISTROSCALE.its
    cp -f $FBDIR/configs/linux/linux_${DESTARCH}_${SOCFAMILY}.its $tmpits
    sed -i "s/rootfs_yocto_${DESTARCH}_tiny/rootfs_${DISTROTYPE}_${DESTARCH}_${DISTROSCALE}/" $tmpits && \
    mkimage -f $tmpits $FBDIR/build/images/lsdk_linux_${DESTARCH}${endiantype}_${SOCFAMILY}_$DISTROSCALE.itb && rm -f $tmpits && \
    fbprint_d $FBDIR/build/images/lsdk_linux_${DESTARCH}_${SOCFAMILY}${endiantype}_$DISTROSCALE.itb
}

generate_distro_bootscr() {
    # $1: machine name
    [ ! -f $FBDIR/configs/board/$1/manifest ] && echo $FBDIR/configs/board/$1/manifest not found && exit
    if [ "$ENCAP" = "y" ] ; then
	    [ -z $KEY_ID ] && KEY_ID=0x12345678123456781234567812345678
	    if [ ${#KEY_ID} -gt 34 ]; then
		echo "Key ID should be of 16 bytes" && exit
	    else
		[ ${KEY_ID:0:2} != 0x ] && echo "Improper format! Should start with 0x " && exit
	    fi
	    while [[ ${#KEY_ID} != 34 ]]; do
		KEY_ID=${KEY_ID:0:2}0${KEY_ID:2}
	    done
	    echo $KEY_ID
	    key_id_1=${KEY_ID:2:8}
	    key_id_2=${KEY_ID:10:8}
	    key_id_3=${KEY_ID:18:8}
	    key_id_4=${KEY_ID:26:8}
    fi

    . $FBDIR/configs/board/$1/manifest
    if [ $1 = ls1088ardb_pb ]; then
	mkdir -p $FBDIR/build/firmware/u-boot/ls1088ardb
    else
	mkdir -p $FBDIR/build/firmware/u-boot/$1
    fi
    if [ -n "$distro_bootscript" ] ; then
	if [ -n "$securevalidate" ]; then
	    if [ "$ENCAP" = "y" ]; then
		if [ $bootscript_dec != null ]; then
		    echo $securevalidate_dec > $bootscript_dec.tmp
		    echo $distroboot >> $bootscript_dec.tmp
		    mkimage -A arm64 -O linux -T script -C none -a 0 -e 0  -n "boot.scr" \
			    -d $FBDIR/$bootscript_dec.tmp $FBDIR/$bootscript_dec
		    rm -f $FBDIR/$bootscript_dec.tmp
		fi
		echo $securevalidate_enc > $FBDIR/${distro_bootscript}.tmp
	    elif [ "$IMA_EVM" = "y" ]; then
		if [ $bootscript_enforce != null ] ; then
		    echo $securevalidate_enforce > $bootscript_enforce.tmp
		    echo $distroboot_ima >> $bootscript_enforce.tmp
		    mkimage -A arm64 -O linux -T script -C none -a 0 -e 0  -n "boot.scr" \
			    -d $FBDIR/$bootscript_enforce.tmp $FBDIR/$bootscript_enforce
		    rm -f $FBDIR/$bootscript_enforce.tmp
		fi
		echo $securevalidate_fix > $FBDIR/${distro_bootscript}.tmp
       	    else
		echo $securevalidate > $FBDIR/${distro_bootscript}.tmp
	    fi
	fi
	[ "$IMA_EVM" = "y" ] && echo $distroboot_ima >> $FBDIR/${distro_bootscript}.tmp || echo $distroboot >> $FBDIR/${distro_bootscript}.tmp
	mkimage -A arm64 -O linux -T script -C none -a 0 -e 0  -n "boot.scr" -d $FBDIR/${distro_bootscript}.tmp $FBDIR/$distro_bootscript
	rm -f $FBDIR/${distro_bootscript}.tmp
	fbprint_d $distro_bootscript
    fi
}

generate_uefi_grub_cfg() {
    for brd in $uefi_machine_list; do
	if [ ! -f $FBDIR/configs/board/$brd/manifest ]; then
	    echo $FBDIR/configs/board/$brd/manifest not found
	    continue
	fi
	stra=`grep 'uefi_grub_search' $FBDIR/configs/board/$brd/manifest | cut -d'"' -f2`
	strb=`grep 'uefi_grub_linux' $FBDIR/configs/board/$brd/manifest | cut -d'"' -f2`
	mkdir -p $FBDIR/build/firmware/uefi/$brd
	filename=$FBDIR/build/firmware/uefi/$brd/${brd}_grub.cfg
	echo set default=\"1\" >  $filename
	echo set timeout=10  >> $filename
	echo "menuentry 'LSDK on QorIQ ARM64 $brd' {" >> $filename
	echo "	""$stra" >> $filename
	echo "	""$strb" >> $filename
	echo "}" >> $filename
    done
}

generate_bootpartition_tarball() {
    # check kernel image
    curbrch=`cd $KERNEL_PATH && git branch | grep ^* | cut -d' ' -f2`
    [ ! -f $FBDIR/$kernel_img -o ! -f $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release ] && \
    echo Building the dependent $kernel_img ... && generate_kernel_img

    [ -f $FBDIR/build/images/lsdk_linux_${DESTARCH}_${SOCFAMILY}_tiny.itb ] || \
    flex-builder -i mklinux -r yocto:tiny -a $DESTARCH -p $SOCFAMILY -f $CONFIGLIST

    [ $CONFIG_APP_EDGESCALE = y -o $DISTROSCALE = edgescale ] && \
    bootpartname=bootpartition_${SOCFAMILY}_${DESTARCH}_edgescale || \
    bootpartname=bootpartition_${SOCFAMILY}_${DESTARCH}
    bootpartdir=$FBDIR/build/images/$bootpartname
    mkdir -p $bootpartdir
    [ -f $FBDIR/$initrdrfs ] || flex-builder -c initrd -a $DESTARCH -f $CONFIGLIST

    if [ $DESTARCH = ppc64 -o $DESTARCH = ppc32 ]; then
	socseries=t
    elif [ $DESTARCH = arm64 -o $DESTARCH = arm32 ]; then
	if [ $SOCFAMILY = IMX ]; then
	    socseries=im
	elif [ $SOCFAMILY = LS  ]; then
	    socseries=l
	fi
	[ -f $FBDIR/packages/rfs/initrd/rootfs_yocto_${DESTARCH}_tiny.cpio.gz ] && \
	cp -f $FBDIR/packages/rfs/initrd/rootfs_yocto_${DESTARCH}_tiny.cpio.gz $bootpartdir
    fi
    cp $FBDIR/build/images/lsdk_linux_${DESTARCH}_${SOCFAMILY}_tiny.itb $bootpartdir
    kernelrelease=$(cat $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release)
    [ $DESTARCH = arm64 ] && kernelimg=Image* || kernelimg=zImage*
    cp -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/{*.dtb,$kernelimg,config-$kernelrelease} $bootpartdir
    if [ $DESTARCH = arm64 ]; then
	cp -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/vmlinuz-$kernelrelease $bootpartdir
    elif [ $DESTARCH = arm32 ]; then
	cp $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/uImage* $bootpartdir
    fi
    cd $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/lib/modules
    for moddir in `ls | grep ^[0-9]`; do
	rm -f $moddir/{build,source}
    done
    cd $FBDIR

    # distro boot script
    [ -f $FBDIR/$distro_bootscript ] || flex-builder -i mkdistroscr -p $SOCFAMILY -f $CONFIGLIST
    find $FBDIR/build/firmware/u-boot/${socseries}* -name "*boot.scr" | xargs -I {} cp {} $bootpartdir

    # check UEFI
    if [ "$CONFIG_FW_UEFI_BIN" = y -a $SOCFAMILY = LS ]; then
	generate_uefi_grub_cfg
	mkdir -p $bootpartdir/grub
	find  $FBDIR/build/firmware/uefi/ -name "*grub.cfg" | xargs -I {} cp {} $bootpartdir/grub
	[ -f $FBDIR/build/firmware/uefi/grub/BOOTAA64.EFI ] || flex-builder -c uefi_bin -f $CONFIGLIST
	cp $FBDIR/build/firmware/uefi/grub/BOOTAA64.EFI $bootpartdir/grub
    fi

    # check secure boot headers
    if [ "$SECURE" = y -a $SOCFAMILY = LS ] && [ -d $FBDIR/build/firmware/secboot_hdrs ]; then
	cp -rf $FBDIR/build/firmware/secboot_hdrs $bootpartdir
	cp -f $FBDIR/build/firmware/secboot_hdrs/*/*bs.out $bootpartdir
    fi

    # check IMA/EVM
    if [ "$IMA_EVM" = y -a $SOCFAMILY = LS ]; then
	[ -f $FBDIR/build/images/initramfs_imaevm_${DESTARCH}.img ] || \
	flex-builder -i mkrfs -r buildroot:imaevm -a $DESTARCH -f $CONFIGLIST

	cp -f $FBDIR/build/images/initramfs_imaevm_${DESTARCH}.img $bootpartdir/initramfs.img
	for brd in $LS_MACHINE_LIST; do
	    [ -f $FBDIR/build/firmware/u-boot/$brd/${brd}_enforce_boot.scr ] && \
	    cp -f $FBDIR/build/firmware/u-boot/$brd/${brd}_enforce_boot.scr $bootpartdir
	done
    fi

    # install flash images to bootpartition
    if [ "$INSTALL_FLASH_IMAGES" = "y" -a $SOCFAMILY = LS ]; then
	if [ $DESTARCH = arm64 -a $MACHINE = all ]; then
	    brdlist="`echo $LS_MACHINE_LIST | sed s/ls1021atwr//`"
	elif [ $DESTARCH = arm32 -a $MACHINE = all ]; then
	    brdlist="ls1021atwr"
	elif [ $DESTARCH = ppc64 -a $MACHINE = all ]; then
	     brdlist="t1024rdb t2080rdb t4240rdb"
	elif [ $MACHINE != all ]; then
	    brdlist=$MACHINE
	fi

	for brd in $brdlist; do
	    if ! echo $LS_MACHINE_LIST | grep -q $brd; then continue; fi
	    mkdir -p $bootpartdir/flash_images/$brd
	    [ -f $FBDIR/build/images/firmware_${brd}_uboot_qspiboot.img ] && \
	    cp -f $FBDIR/build/images/firmware_${brd}_uboot_qspiboot.img $bootpartdir

	    [ -f $FBDIR/build/images/firmware_${brd}_uboot_xspiboot.img ] && \
	    cp -f $FBDIR/build/images/firmware_${brd}_uboot_xspiboot.img $bootpartdir

	    [ -f $FBDIR/build/images/firmware_${brd}_uboot_norboot.img ] && \
	    cp -f $FBDIR/build/images/firmware_${brd}_uboot_norboot.img $bootpartdir

	    [ "$CONFIG_FW_UEFI" = y -a -f $FBDIR/build/images/firmware_ls2088ardb_uefi_norboot.img ] && \
	    cp -f $FBDIR/build/images/firmware_ls2088ardb_uefi_norboot.img $bootpartdir

	    [ "$CONFIG_FW_UEFI" = y -a -f $FBDIR/build/images/firmware_lx2160ardb_uefi_xspiboot.img ] && \
	    cp -f $FBDIR/build/images/firmware_lx2160ardb_uefi_xspiboot.img $bootpartdir

	    # atf
	    [ $brd = ls1021atwr ] && continue
	    if [ "$SECURE" != y ] && [ ! -f $FBDIR/build/firmware/atf/$brd/fip_uboot.bin ]; then
		flex-builder -c atf -m $brd -f $CONFIGLIST
	    elif [ "$SECURE" = y ] && [ ! -f $FBDIR/build/firmware/atf/$brd/fip_uboot_sec.bin ]; then
		flex-builder -c atf -m $brd -s -f $CONFIGLIST
	    fi
	    [ -f $FBDIR/build/firmware/atf/$brd/fip_uboot.bin ] && \
	    cp -f $FBDIR/build/firmware/atf/$brd/* $bootpartdir/flash_images/$brd
	    [ $brd = ls1088ardb -a -f $FBDIR/build/firmware/atf/ls1088ardb_pb/fip_uboot.bin ] && \
	    cp -f $FBDIR/build/firmware/atf/ls1088ardb_pb/* $bootpartdir/flash_images/$brd

	    # ddr phy
	    [ -f $FBDIR/build/firmware/ddr_phy_bin/fip_ddr_all.bin -a $brd = lx2160ardb ] && \
	    cp -f $FBDIR/build/firmware/ddr_phy_bin/fip_ddr_all.bin $bootpartdir/flash_images/$brd

	    # fman ucode
	    [ -f $FBDIR/build/firmware/fm_ucode/fsl_fman_ucode_ls1046_r1.0_106_4_18.bin ] || \
	    flex-builder -c fm_ucode -f $CONFIGLIST
	    cp -f $FBDIR/build/firmware/fm_ucode/*ls104* $bootpartdir/flash_images

	    # qe firmware
	    [ -f $FBDIR/build/firmware/qe_ucode/iram_Type_A_LS1021a_r1.0.bin ] || \
	    flex-builder -c qe_ucode -f $CONFIGLIST
	    cp -f $FBDIR/build/firmware/qe_ucode/iram_Type*.bin $bootpartdir/flash_images

	    # pfe
	    if [ ${brd:0:7} = ls1012a ]; then
		[ -f $FBDIR/build/firmware/pfe_bin/ls1012a/u-boot/pfe_fw_sbl.itb ] || \
		flex-builder -c pfe_bin -f $CONFIGLIST
		cp -f build/firmware/pfe_bin/ls1012a/u-boot/pfe_fw_sbl.itb $bootpartdir/flash_images
	    fi

	    # DPAA2-MC
	    if [ ${brd:0:7} = ls1088a -o ${brd:0:7} = ls2088a -o ${brd:0:7} = lx2160a ]; then
		[ -d $FBDIR/build/firmware/mc_utils/config ] || \
		flex-builder -c bin_firmware -f $CONFIGLIST
		socname=${brd::-3}
		[ $brd = ls1088ardb_pb ] && socname=${brd::-6}
		cp -f $FBDIR/build/firmware/mc_bin/$socname/mc*.itb $bootpartdir/flash_images/$brd
		find $FBDIR/build/firmware/mc_utils/config/$socname/RDB -name *.dtb | \
		xargs -I {} cp {} $bootpartdir/flash_images/$brd
	    fi

	    # phy_cortina
	    [ -f $FBDIR/build/firmware/phy_cortina/cs4315-cs4340-PHY-ucode.txt ] || \
	    flex-builder -c phy_cortina -f $CONFIGLIST
	    cp -f $FBDIR/build/firmware/phy_cortina/*PHY-ucode* $bootpartdir/flash_images

	    # phy_inphi
	    [ -f build/firmware/phy_inphi/in112525-phy-ucode.txt ] && \
	    cp -f $FBDIR/build/firmware/phy_inphi/in112525-phy-ucode.txt $bootpartdir/flash_images
	done
	[ -f $FBDIR/build/images/flash_images.scr ] || flex-builder -i mkflashscr -f $CONFIGLIST
	cp -f $FBDIR/build/images/flash_images.scr $bootpartdir
    fi

    if [ $DESTARCH = arm64 -a $SOCFAMILY = LS ]; then
	rm -f $bootpartdir/*ls1021*
    elif [ $DESTARCH = arm32 -a $SOCFAMILY = LS ]; then
	rm -f $bootpartdir/*{ls1012,ls1028,ls1043,ls1046,ls1088,ls2088,lx2160}*
    fi

    [ -f $FBDIR/build/images/srk_hash.txt -a $SOCFAMILY = LS ] && cp $FBDIR/build/images/srk_hash.txt $bootpartdir
    cd $bootpartdir
    majorver=`grep "^VERSION =" $KERNEL_PATH/Makefile | cut -d' ' -f3`
    subver=`grep "^PATCHLEVEL =" $KERNEL_PATH/Makefile | cut -d' ' -f3`
    kernelver=$majorver.$subver
    boottarball=${bootpartname}_lts_${kernelver}${imaevmopt}_`date +%Y%m%d%H%M`.tgz
    tar czf ../$boottarball *
    cd $FBDIR/build/images
    [ -d ${bootpartname}_lts_${kernelver}${imaevmopt} ] && rm -rf ${bootpartname}_lts_${kernelver}${imaevmopt}
    mv $bootpartname ${bootpartname}_lts_${kernelver}${imaevmopt}
    ln -sf $boottarball ${bootpartname}_lts_${kernelver}${imaevmopt}.tgz

    # pack kernel and modules
    [ $CONFIG_APP_EDGESCALE = y ] && kernelpkg=linux_${kernelver}${imaevmopt}_${SOCFAMILY}_${DESTARCH}_edgescale || \
    kernelpkg=linux_${kernelver}${imaevmopt}_${SOCFAMILY}_${DESTARCH}
    moduledir=`realpath $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/lib/modules/$kernelver*`
    mkdir -p $kernelpkg/{boot,usr}
    cp -rf $KERNEL_OUTPUT_PATH/$curbrch/usr/include  $kernelpkg/usr/
    if [ $DESTARCH = arm64 ]; then
	cp -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/{Image*,config-*,*.dtb} $kernelpkg/boot/
    elif [ $DESTARCH = arm32 ]; then
	cp -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/{uImage*,zImage*,config-*,*.dtb} $kernelpkg/boot/
    fi
    cp $FBDIR/build/firmware/u-boot/${socseries}*/*.scr $kernelpkg/boot
    mkdir -p $kernelpkg/lib/modules
    cp -rf $moduledir $kernelpkg/lib/modules/
    if [ -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/perf ]; then
	mkdir -p $kernelpkg/usr/lib/linux-tools/$kernelrelease
	cp -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/perf $kernelpkg/usr/lib/linux-tools/$kernelrelease/
    fi
    timestamp=`date +%Y%m%d%H%M`
    cd $kernelpkg && tar czf ../${kernelpkg}_$timestamp.tgz * && cd - && ln -sf ${kernelpkg}_$timestamp.tgz ${kernelpkg}.tgz
    cd $FBDIR && rm -rf $FBDIR/build/images/$kernelpkg
    fbprint_d $FBDIR/build/images/$boottarball
}

build_distro_rfs_ubuntu() {
    if [ $DESTARCH = arm64 ]; then
	tarch=arm64
    elif [ $DESTARCH = arm32 ]; then
	tarch=armhf
    elif [ $DESTARCH = ppc64 ]; then
	tarch=ppc64el
    fi
    if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ] && [ -f $RFSDIR/etc/buildinfo ]; then
	echo $RFSDIR already exists! && exit 0
    fi
    if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ] && [ ! -f $RFSDIR/etc/buildinfo ]; then
	echo generating $RFSDIR ...
	test -c $RFSDIR/dev/pts/ptmx && sudo umount $RFSDIR/dev/pts
	test -f $RFSDIR/proc/uptime && sudo umount $RFSDIR/proc
	[ -n "$RFSDIR" ] && sudo rm -rf $RFSDIR/*
    fi
    [ -n "$BUILDARG" ] && pkglist=$BUILDARG || pkglist=additional_packages_list
    mkdir -p $RFSDIR

    if [ "$FETCH_PREBUILT_LSDK_RFS" = y ] && [ $DISTROTYPE = ubuntu -a $DISTROSCALE != devel -a "$DISTROSCALE" != mate ]; then
       rootfsn=rootfs_${DISTRIB_VERSION}_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}.tgz
       rootfs_url=$DISTRO_SVR_URL/$DISTRIB_VERSION/$rootfsn
       echo Option FETCH_PREBUILT_LSDK_RFS is enabled in configs/$CONFIGLIST
       if [ ! -f $FBDIR/build/images/$rootfsn ]; then
           fbprint_n "Downloading $rootfs_url ..."
           cd $FBDIR/build/images
           curl -R -O -k -f $rootfs_url || true
       fi
       [ -f $FBDIR/build/images/$rootfsn ] && echo Extracting $rootfsn && \
       sudo tar xf $rootfsn -C $RFSDIR || echo Building $RFSDIR from scratch
       cd $FBDIR
    fi

    if [ $DISTROSCALE = lite -a $DISTROTYPE = ubuntu ]; then
	. $FBDIR/configs/ubuntu/build.cfg
	rfsname=`eval echo '${'"ubuntu_base_""$DESTARCH"'}'`
	if [ -f $FBDIR/build/rfs/$rfsname ]; then
	    echo build/rfs/$rfsname exist already
	else
	    curl -R -k -f $ubuntu_base_url/$rfsname -o $FBDIR/build/rfs/$rfsname
	    [ $? != 0 ] && fbprint_e "Failed to download $ubuntu_base_url/$rfsname" && exit
	fi
	if [ -f $FBDIR/build/rfs/$rfsname ]; then
	    md5sum_expected=`eval echo '${'"md5sum_""$DESTARCH"'}'`
	    md5sum_current=`md5sum $FBDIR/build/rfs/$rfsname | cut -d' ' -f1`
	    if [ $md5sum_expected = $md5sum_current ]; then
		echo Extracting $rfsname ...
		sudo tar xf $FBDIR/build/rfs/$rfsname -C $RFSDIR
	    else
		fbprint_e "The downloaded build/rfs/$rfsname md5sum $md5sum_current is not same as expected $md5sum_expected, please try again"
		rm -f $FBDIR/build/rfs/$rfsname && exit
	    fi
	fi
	flex-mkdistrorfs $tarch $CODENAME $DISTROSCALE $pkglist && \
	flex-builder -i merge-component -r ubuntu:lite -a $DESTARCH -f $CONFIGLIST && \
	flex-builder -i packrfs -r ubuntu:lite -a $DESTARCH -f $CONFIGLIST
    elif [ $DISTROSCALE = mate -a $DISTROTYPE = ubuntu ]; then
	. $FBDIR/configs/ubuntu/build.cfg
        rfsname=ubuntu_mate_${DESTARCH}.img
	[ $DESTARCH = arm32 ] && rootfs_url=$ubuntu_mate_arm32_url || rootfs_url=$ubuntu_mate_arm64_url
	if [ ! -f $FBDIR/build/rfs/$rfsname.xz ]; then
	    curl -R -k -f $rootfs_url -o $FBDIR/build/rfs/$rfsname.xz
	    [ $? != 0 ] && fbprint_e "Failed to download $rootfs_url" && exit
	fi
	if [ ! -f $FBDIR/build/rfs/$rfsname ]; then
	    sha256sum_expected=`eval echo '${'"sha256sum_""$DESTARCH"'}'`
	    sha256sum_current=`sha256sum $FBDIR/build/rfs/$rfsname.xz | cut -d' ' -f1`
	    if [ $sha256sum_expected = $sha256sum_current ]; then
		echo Extracting $rfsname.xz ... && unxz -k $FBDIR/build/rfs/$rfsname.xz
	    else
		fbprint_e "The downloaded build/rfs/$rfsname sha256sum $sha256sum_current is not same as expected $sha256sum_expected, please try again"
		rm -rf $FBDIR/build/rfs/${rfsname}* && exit
	    fi
	fi
	mkdir -p $FBDIR/build/rfs/ubuntu_mate_mnt
	sudo mount -o loop,offset=209715200 $FBDIR/build/rfs/$rfsname $FBDIR/build/rfs/ubuntu_mate_mnt
	sudo cp -raf $FBDIR/build/rfs/ubuntu_mate_mnt/* $RFSDIR && sudo umount $FBDIR/build/rfs/ubuntu_mate_mnt && rm -rf $FBDIR/build/rfs/ubuntu_mate_mnt
	sudo cp -f $RFSDIR/home/oem/.profile $RFSDIR/root/.profile
	echo -e "greeter-show-manual-login=true\nall-guest=false" | sudo tee -a $RFSDIR/usr/share/lightdm/lightdm.conf.d/50-slick-greeter.conf
	echo "" | sudo tee $RFSDIR/etc/fstab
	echo "$DISTRIB_NAME Mate ${DISTRIB_VERSION:4:4} (based on Ubuntu-Mate) \n \l" | sudo tee $RFSDIR/etc/issue 1>/dev/null
	distrostamp="Build: `date +'%Y-%m-%d %H:%M:%S'`"
	echo "$DISTRIB_NAME Mate ${DISTRIB_VERSION:4:4} (based on Ubuntu-Mate)" | sudo tee $RFSDIR/etc/buildinfo 1>/dev/null
	echo "$distrostamp" | sudo tee -a $RFSDIR/etc/buildinfo 1>/dev/null
	sudo sed -i 's/root:\*/root:/g' $RFSDIR/etc/shadow && sudo rm -f $RFSDIR/etc/modules-load.d/cups-filters.conf && \
	sudo rm -f $RFSDIR/etc/modules-load.d/raspi.conf && sudo rm -f $RFSDIR/lib/systemd/system/oem-config.service && \
	sudo rm -f $RFSDIR/lib/systemd/system/oem-config.target && sudo rm -f $RFSDIR/lib/modprobe.d/fbdev-blacklist.conf && \
	sudo rm -f $RFSDIR/etc/initramfs/post-update.d/flash-kernel && sudo rm -rf $RFSDIR/boot/*
	if [ "$CONFIG_APP_WESTON" = y ]; then
	    # install packages depended by wayland & weston
	    check_proxy $RFSDIR && sudo chroot $RFSDIR apt update && sudo chroot $RFSDIR apt install -y libffi-dev libexpat1-dev \
	    libxml2-dev libudev-dev libinput-dev libpixman-1-dev libxkbcommon-dev libpng-dev libcairo2-dev libpam0g-dev
	fi
        [ $DESTARCH = arm64 ] &&  sysarch=aarch64-linux-gnu || sysarch=arm-linux-gnueabihf
        cd $RFSDIR/lib/$sysarch && sudo ln -sf  ../../usr/lib/$sysarch/libxml2.so libxml2.so && \
	sudo ln -sf libz.so.1 libz.so && sudo ln -sf ../../usr/lib/$sysarch/libcrypto.so.1.1 libcrypto.so.1.1 && \
        cd $RFSDIR/usr/lib/$sysarch && sudo ln -sf ../../../lib/$sysarch/libtinfo.so.5 libtinfo.so && \
        sudo ln -sf ../../../lib/$sysarch/librt.so.1 librt.so && sudo ln -sf ../../../lib/$sysarch/libm.so.6 libm.so && \
	sudo ln -sf ../../../lib/$sysarch/libpam.so.0 libpam.so && sudo ln -sf ../../../lib/$sysarch/libdl.so.2 libdl.so && \
        sudo ln -sf ../../../lib/$sysarch/libutil.so.1 libutil.so && cd $FBDIR
    elif [ ! -f $RFSDIR/etc/buildinfo ]; then
	flex-mkdistrorfs $tarch $CODENAME $DISTROSCALE $pkglist
    fi

    if [ -d $RFSDIR/etc/udev/rules.d ]; then
	sudo cp -f $FBDIR/packages/rfs/misc/udev/udev-rules-qoriq/72-fsl-dpaa-persistent-networking.rules $RFSDIR/etc/udev/rules.d
	sudo cp -f $FBDIR/packages/rfs/misc/udev/udev-rules-qoriq/73-fsl-enetc-networking.rules $RFSDIR/etc/udev/rules.d
    fi
    fbprint_d $RFSDIR
}

build_distro_rfs_centos() {
    if [ $DESTARCH != arm64 -a $DESTARCH != ppc64 ]; then
	echo The supported CentOS arch: arm64, ppc64 && exit 1
    fi
    [ -f $RFSDIR/etc/buildinfo ] && echo $RFSDIR already exists! && exit 0
    if [ -d $RFSDIR -a ! -f $RFSDIR/etc/buildinfo ]; then
	[ -n "$RFSDIR" ] && sudo rm -rf $RFSDIR/*
    fi
    echo "building $RFSDIR ..."
    centos_url=`eval echo '${'"centos_""$DESTARCH"'_url}'`
    if [ ! -s $FBDIR/build/rfs/centos_${DESTARCH}_squashfs.img ]; then
	curl -R -k -f $centos_url -o $FBDIR/build/rfs/centos_${DESTARCH}_squashfs.img
	[ $? != 0 -o ! -s $FBDIR/build/rfs/centos_${DESTARCH}_squashfs.img ] && \
	fbprint_e "Failed to download $centos_url" && exit
    fi
    echo Extracting CentOS squashfs.img ...
    mkdir -p $FBDIR/build/rfs/{centosmnt,centosmnt2}
    sudo mount -o loop $FBDIR/build/rfs/centos_${DESTARCH}_squashfs.img $FBDIR/build/rfs/centosmnt && \
    sudo mount -o loop $FBDIR/build/rfs/centosmnt/LiveOS/rootfs.img $FBDIR/build/rfs/centosmnt2 && \
    sudo cp -rf $FBDIR/build/rfs/centosmnt2/* $RFSDIR/ && \
    sudo umount $FBDIR/build/rfs/centosmnt2 && sudo umount $FBDIR/build/rfs/centosmnt
    if [ $? = 0 ]; then
	distrots=${DISTROTYPE}_${centos_version}_${DESTARCH}_`date +%Y%m%d%H%M`
	echo $distrots | sudo tee $RFSDIR/etc/buildinfo
	rm -rf $FBDIR/build/rfs/{centosmnt,centosmnt2}
    else
	echo Failded to build $RFSDIR && exit 1
    fi

    if [ -d $RFSDIR/etc/udev/rules.d ]; then
	sudo cp -f $FBDIR/packages/rfs/misc/udev/udev-rules-qoriq/72-fsl-dpaa-persistent-networking.rules $RFSDIR/etc/udev/rules.d
    fi
    sudo rm -f $RFSDIR/etc/systemd/system/default.target
    sudo ln -sf $RFSDIR/usr/lib/systemd/system/multi-uset.target $RFSDIR/etc/systemd/system/default.target
    if [ $DESTARCH = arm64 ]; then
	# reinstall yum
	cd $RFSDIR && yum_url=`eval echo '${'"yum_""$DESTARCH"'_url}'`
	curl -R -k -f $yum_url -o $RFSDIR/yum.rpm
	sudo rpm2cpio $RFSDIR/yum.rpm | sudo cpio -divu && rm -f $RFSDIR/yum.rpm
    fi
    sudo mkdir -p $RFSDIR/etc/yum.repos.d
    sudo cp -f $FBDIR/configs/centos/CentOS-Base.repo $RFSDIR/etc/yum.repos.d
    fbprint_d $RFSDIR
}

build_distro_rfs_buildroot() {
    if [ ! -d  $FBDIR/packages/rfs/buildroot ]; then
	git clone $buildroot_repo_url $FBDIR/packages/rfs/buildroot && \
	cd $FBDIR/packages/rfs/buildroot && git checkout $buildroot_repo_tag -b $buildroot_repo_tag && cd -
    fi
    if [ ! -f  $FBDIR/packages/rfs/buildroot/.patched ]; then
	cd $FBDIR/packages/rfs/buildroot && echo patching buildroot repo ... && \
	git am $FBDIR/configs/buildroot/patch/*.patch && touch .patched && cd -
    fi
    sed -i '/have legacy configuration.*/d' $FBDIR/packages/rfs/buildroot/Makefile.legacy
    if [ "$1" = toolchain ]; then
	mkdir -p ${RFSDIR%/*}
	cp -f $FBDIR/configs/buildroot/qoriq_${2}_tiny_defconfig $FBDIR/packages/rfs/buildroot/configs
	make -j $JOBS qoriq_${2}_tiny_defconfig O=${RFSDIR%/*} -C $FBDIR/packages/rfs/buildroot
	make -j $JOBS toolchain O=${RFSDIR%/*} -C $FBDIR/packages/rfs/buildroot KERNEL_TREE=$KERNEL_TREE
	return
    fi
    if [ $DISTROSCALE = tiny ]; then
	brconfig=qoriq_${DESTARCH}${endiantype}_tiny_defconfig
	cp $FBDIR/configs/buildroot/$brconfig $FBDIR/packages/rfs/buildroot/configs
	make -j $JOBS O=${RFSDIR%/*} -C $FBDIR/packages/rfs/buildroot $brconfig
    elif [ $DISTROSCALE = imaevm ]; then
	[ "$ENDIANTYPE" = be ] && echo currently $DESTARCH big-endian is not supported with initramfs IMA/EVM! && exit 1 || \
	brconfig=qoriq_${DESTARCH}_imaevm_defconfig
	mkdir -p ${RFSDIR%/*}/overlay/{mnt/root,sys,proc/sys/kernel,root}
	cp -f $FBDIR/configs/buildroot/sec_imaevm.sh ${RFSDIR%/*}/overlay/init
	cp $FBDIR/configs/buildroot/$brconfig $FBDIR/packages/rfs/buildroot/configs
	make -j $JOBS O=${RFSDIR%/*} -C $FBDIR/packages/rfs/buildroot $brconfig
    else
	brconfig=qoriq_${DESTARCH}${endiantype}_devel_defconfig
	cp $FBDIR/configs/buildroot/$brconfig $FBDIR/packages/rfs/buildroot/configs
	make -j $JOBS O=${RFSDIR%/*} -C $FBDIR/packages/rfs/buildroot $brconfig
    fi
    if [ "$DISTROSCALEOPT" = custom ]; then
	make -j $JOBS O=${RFSDIR%/*} -C $FBDIR/packages/rfs/buildroot menuconfig
	fbprint_d "customized ${RFSDIR%/*}/.config"
	echo then run flex-builder -i mkrfs -r buildroot:$DISTROSCALE -a $DESTARCH to build target distro with the custom .config above.
	exit
    fi
    [ -d $RFSDIR/usr/local/aiop/bin ] && rm -rf $RFSDIR/usr/local/aiop/bin
    make -j $JOBS O=${RFSDIR%/*} -C $FBDIR/packages/rfs/buildroot KERNEL_TREE=$KERNEL_TREE
    if [ $DISTROSCALE = imaevm ]; then
	mkimage -A arm -O linux -T ramdisk -n "initramfs imaevm" -d ${RFSDIR%/*}/images/rootfs.cpio.gz \
		${RFSDIR%/*}/images/initramfs_imaevm_${DESTARCH}.img
	cp -f ${RFSDIR%/*}/images/initramfs_imaevm_${DESTARCH}.img $FBDIR/packages/rfs/initrd/
	cp -f ${RFSDIR%/*}/images/initramfs_imaevm_${DESTARCH}.img $FBDIR/build/images
	cp -f ${RFSDIR%/*}/images/rootfs.cpio.gz $FBDIR/packages/rfs/initrd/rootfs_buildroot_${DESTARCH}${endiantype}_$DISTROSCALE.cpio.gz
	fbprint_d ${RFSDIR%/*}/images/initramfs_imaevm_${DESTARCH}.img
	exit 0
    fi
    ls -l $FBDIR/build/images/rootfs_buildroot*
    rm -f $RFSDIR/THIS_IS_NOT_YOUR_ROOT_FILESYSTEM
    flex-builder -i packrfs -r buildroot:$DISTROSCALE -a ${DESTARCH}$endianstr -f $CONFIGLIST
}

build_distro_rfs_yocto() {
    [ $username = root ] && fbprint_w "Please build yocto as non-root account" && exit
    [ -f $FBDIR/packages/rfs/yocto-poky/meta-poky/recipes-core/tiny-init/files/init ] || \
    git clone $yocto_poky_repo_url $FBDIR/packages/rfs/yocto-poky -b $yocto_poky_repo_branch

    . $FBDIR/packages/rfs/yocto-poky/oe-init-build-env $FBDIR/build/rfs/rootfs_yocto_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}
    $FBDIR/configs/yocto/reconfig.sh fixcfg
    cp -f $FBDIR/configs/yocto/local_${DESTARCH}_${DISTROSCALE}.conf $FBDIR/build/rfs/rootfs_yocto_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}/conf/local.conf
    export LANG=en_US.UTF-8
    [ $DESTARCH = arm64 ] && export MACHINE=qemuarm64 || export MACHINE=qemuarm
    bitbake $yoctoimgtype
    [ $DESTARCH = arm64 -a $DISTROSCALE = devel ] && $FBDIR/configs/yocto/reconfig.sh fixlib $RFSDIR/usr/lib/libc.so
    [ -L $FBDIR/build/rfs/rootfs_yocto_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}/target ] || \
    ln -s $RFSDIR $FBDIR/build/rfs/rootfs_yocto_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}/target

    # setup app components (restool, aiop_tool, tsntool, fmc, etc) in yocto userland
    echo Building and installing app components for $DISTROTYPE $DISTROSCALE
    flex-builder -c apps -r yocto:$DISTROSCALE -a ${DESTARCH} -f $CONFIGLIST
    if [ $DISTROSCALE = tiny ]; then
	[ -f $DESTDIR/usr/local/bin/restool ] && sudo cp -f $DESTDIR/usr/local/bin/{ls-*,restool} $RFSDIR/usr/bin
	[ -f $DESTDIR/usr/bin/aiop_tool ] && sudo cp -f $DESTDIR/usr/bin/aiop_tool $RFSDIR/usr/bin
	[ -f $DESTDIR/lib/libfm-arm.a ] && sudo cp -f $DESTDIR/lib/libfm-arm.a $RFSDIR/lib
	[ -f $DESTDIR/usr/local/bin/fmc ] && sudo cp -f $DESTDIR/usr/local/bin/fmc $RFSDIR/usr/bin && \
	sudo cp -rf $DESTDIR/etc/fmc $RFSDIR/etc && sudo cp -f $DESTDIR/usr/local/lib/*/libfmc.a $RFSDIR/usr/local/lib
	[ -f $DESTDIR/usr/local/bin/tsntool ] && sudo cp -f $DESTDIR/usr/local/bin/tsntool $RFSDIR/usr/bin && \
	sudo cp -f $DESTDIR/usr/lib/libtsn.so $RFSDIR/usr/lib
	sudo mkdir -p $RFSDIR/usr/local/bin && [ -f $DESTDIR/usr/local/bin/ccsr ] && sudo cp -f $DESTDIR/usr/local/bin/ccsr $RFSDIR/usr/local/bin/
	sudo rm -rf $RFSDIR/usr/include/* $RFSDIR/usr/lib/aarch64-poky-linux $RFSDIR/usr/share/libtool $RFSDIR/usr/share/aclocal
	sudo echo TinyLinux | sudo tee $RFSDIR/etc/hostname 1>/dev/null
	echo Installing pfe.ko
	curbrch=`cd $KERNEL_PATH && git branch | grep ^* | cut -d' ' -f2 && cd $FBDIR`
	[ -f $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release ] || flex-builder -c linux -a $DESTARCH -f $CONFIGLIST
	kernelrelease=$(cat $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release)
	pfesrc=$FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/lib/modules/$kernelrelease/kernel/drivers/staging/fsl_ppfe/pfe.ko
	[ -f $pfesrc ] || flex-builder -c linux -a $DESTARCH -f $CONFIGLIST
	[ -f $FBDIR/build/firmware/pfe_bin/ls1012a/slow_path/ppfe_tmu_ls1012a.elf ] || flex-builder -c pfe_bin -f $CONFIGLIST
	sudo rm -rf $RFSDIR/lib/modules/*  && sudo mkdir -p $RFSDIR/lib/modules/$kernelrelease/kernel/drivers/staging/fsl_ppfe && \
	sudo cp $pfesrc $RFSDIR/lib/modules/$kernelrelease/kernel/drivers/staging/fsl_ppfe && sudo mkdir -p $RFSDIR/lib/firmware && \
	sudo cp -f $FBDIR/build/firmware/pfe_bin/ls1012a/slow_path/ppfe*.elf $RFSDIR/lib/firmware && \
	echo "kernel/drivers/staging/fsl_ppfe/pfe.ko:" > modules.dep && sudo cp -f modules.dep $RFSDIR/lib/modules/$kernelrelease && rm -f modules.dep
    elif [ $DISTROSCALE = devel ]; then
	# setup kernel lib modules
	[ -d $FBDIR/build/linux/kernel/$DESTARCH/LS/lib/modules ] || flex-builder -c linux -a $DESTARCH -f $CONFIGLIST
	libmodules=$FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/lib/modules
	modulename=$(echo `ls -t $libmodules` | cut -d' ' -f1)
	modulespath=$libmodules/$modulename
	[ -n "$modulename" ] && sudo rm -rf $RFSDIR/lib/modules/* && sudo cp -rf $modulespath $RFSDIR/lib/modules
	sudo cp -rf $DESTDIR/* $RFSDIR/
	sudo echo DevelLinux | sudo tee $RFSDIR/etc/hostname 1>/dev/null
    fi
    distroinfo="$DISTRIB_NAME $DISTROSCALE ${DISTRIB_VERSION:4:4} (based on Yocto)"
    echo $distroinfo | sudo tee $RFSDIR/etc/issue 1>/dev/null
    echo $distroinfo | sudo tee $RFSDIR/etc/buildinfo 1>/dev/null
    distrostamp="Build: `date +'%Y-%m-%d %H:%M:%S'`"
    echo "$distrostamp" | sudo tee -a $RFSDIR/etc/buildinfo 1>/dev/null
    sudo cp -f $FBDIR/tools/flex-installer $RFSDIR/usr/bin
    $FBDIR/configs/yocto/reconfig.sh fixsys $RFSDIR
    cd $RFSDIR && sudo chown -h -R 0:0 * && \
    sudo find . | sudo cpio --quiet -o -H newc | gzip > $FBDIR/packages/rfs/initrd/rootfs_${DISTROTYPE}_${DESTARCH}_$DISTROSCALE.cpio.gz && \
    cp $FBDIR/packages/rfs/initrd/rootfs_${DISTROTYPE}_${DESTARCH}_$DISTROSCALE.cpio.gz $FBDIR/build/images && cd $FBDIR
    fbprint_d $FBDIR/build/images/rootfs_${DISTROTYPE}_${DESTARCH}_$DISTROSCALE.cpio.gz

    cp -f $yoctotmpdir/deploy/images/$MACHINE/${yoctoimgtype}-${MACHINE}.manifest \
       $FBDIR/build/rfs/rootfs_yocto_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}/yocto_${DESTARCH}_${DISTROSCALE}_packages.manifest

    flex-builder -i packrfs -r yocto:$DISTROSCALE -a $DESTARCH -f $CONFIGLIST
}

build_distro_rfs_android() {
    if [ $PORTFOLIO != layerscape -a $PORTFOLIO != imx6 -a $PORTFOLIO != imx7 -a $PORTFOLIO != imx8 ]; then
	fbprint_e "invalid $PORTFOLIO, valid -p argument: layerscape, imx6, imx7, imx8" && exit 1
    fi
    . $FBDIR/configs/android/build_$PORTFOLIO.cfg
    mkdir -p $FBDIR/packages/rfs/android_$PORTFOLIO
    if [ ! -f $FBDIR/packages/rfs/android_$PORTFOLIO/.repo/manifest.xml ]; then
	echo Downloading Android source to $FBDIR/packages/rfs/android_$PORTFOLIO ...
	cd $FBDIR/packages/rfs/android_$PORTFOLIO
	repo init -u $android_manifest_url -b $android_manifest_branch -m $android_manifest_version.xml
	[ $? != 0 ] && fbprint_e "Android repo Init failed" && return 1
    fi

    if [ ! -d $FBDIR/packages/rfs/android_$PORTFOLIO/packages/apps/Settings/src ]; then
	cd $FBDIR/packages/rfs/android_$PORTFOLIO
	echo "repo sync ..." && repo sync
	[ $? != 0 ] && fbprint_e "Android repo sync failed" && return 1
	fbprint_d "android repo sync"

	# for Layerscape platforms with external PCIe display card in case no native GPU display
	if [ "$CONFIG_EXTERNAL_GRAPHICS" = "y" ]; then
	    if [ ! -f $FBDIR/packages/rfs/android_$PORTFOLIO/.patchdone ]; then
		patch -d frameworks/base -p1 < device/nxp/layerscape/android_frameworks_base.patch && \
		patch -d frameworks/native -p1 < device/nxp/layerscape/android_frameworks_native.patch && \
		touch .patchdone
	    fi
	fi
	[ $PORTFOLIO != layerscape ] && git clone $imx_vendor_repo_url vendor/imx && mv vendor/imx/nxp/* vendor/nxp/
    fi

    echo "Building $FBDIR/packages/rfs/android_$PORTFOLIO ..."
    cd $FBDIR/packages/rfs/android_$PORTFOLIO
    source build/envsetup.sh
    export LC_ALL=C
    lunch $build_type
    make -j $JOBS
    [ $? != 0 ] && fbprint_e "Building Android failed" && return 1
    fbprint_d "Build Android $PORTFOLIO"
}

generate_distro_rfs() {
    if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	build_distro_rfs_ubuntu
    elif [ $DISTROTYPE = centos ]; then
	build_distro_rfs_centos
    elif [ $DISTROTYPE = android ]; then
	build_distro_rfs_android
    elif [ $DISTROTYPE = buildroot ]; then
	build_distro_rfs_buildroot
    elif [ $DISTROTYPE = yocto ]; then
        build_distro_rfs_yocto
    fi
}

check_http_request() {
    retcode=$(curl -I -m 10 -o /dev/null -s -w %{http_code} $1) || true
    if [ $retcode != 000 -a ${retcode:0:1} != 2 -a ${retcode:0:1} != 3 ]; then
        fbprint_e "ERROR: HTTP returned $retcode, failed to access $1"
        fbprint_e "Please check your network to ensure $1 is accessable via HTTP from this machine"
        fbprint_e "Please check HTTP proxy settings if it is needed in your environment" && exit
    fi
    [ $retcode != 200 -a $retcode != 000 ] && fbprint_e "The requested URL $1 returned error $retcode" && exit 1 || true
}

download_distro_images() {
    [ $DISTROTYPE != ubuntu ] && echo only ubuntu flavor userland is downloadable for prebuilt LSDK userland && exit
    [ "$MACHINE" = all ] && fbprint_e "Please specify -m machine" && exit
    flex-installer -i download -m $MACHINE
}

get_prebuilt_initrd() {
    tfile=rootfs_yocto_${DESTARCH}_tiny.cpio.gz
    rdfile=$FBDIR/packages/rfs/initrd/$tfile
    if [ ! -f $rdfile ]; then
	check_http_request $initrd_bin_url/$tfile
	curl -R -f -k $initrd_bin_url/$tfile -o $rdfile
    else
	echo $rdfile exists
    fi
}

gen_ubuntu_ext4rfs() {
    [ -n "$BUILDARG" ] && size=$BUILDARG || size=3G
    if [ ! -f $RFSDIR/etc/fstab ]; then
	echo $RFSDIR not exist, generating it ..
	flex-builder -i mkrfs -r $DISTROTYPE:$DISTROSCALE -a $DESTARCH -f $CONFIGLIST
    fi
    local rfsname=${RFSDIR##*/}
    rfsname=$FBDIR/build/images/$rfsname.ext4.img
    echo Creating $size $rfsname ...
    qemu-img create -f raw $rfsname $size
    if mount | grep $FBDIR/build/images/gstrfsmnt; then
	sudo umount $FBDIR/build/images/gstrfsmnt
    fi
    mkfs.ext4 -F $rfsname
    mkdir -p $FBDIR/build/images/gstrfsmnt
    if ! mount | grep $FBDIR/build/images/gstrfsmnt; then
	sudo mount -o loop $rfsname $FBDIR/build/images/gstrfsmnt
    fi
    sudo cp -a $RFSDIR/. $FBDIR/build/images/gstrfsmnt/
    if mount | grep $FBDIR/build/images/gstrfsmnt; then
	sudo umount $FBDIR/build/images/gstrfsmnt
    fi
    rm -rf $FBDIR/build/images/gstrfsmnt
    echo compressing $rfsname ...
    tar czf $rfsname.gz $rfsname && rm -f $rfsname
    fbprint_d $rfsname.gz
}

compress_distrorfs() {
    test -f $RFSDIR/etc/issue || { fbprint_e "$RFSDIR is incomplete"; exit; }
    if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	test -c $RFSDIR/dev/pts/0 && sudo umount $RFSDIR/dev/pts
	test -f $RFSDIR/proc/uptime && sudo umount $RFSDIR/proc
    fi
    cd $RFSDIR
    local destpath=${RFSDIR##*/}
    if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	tarballname=${destpath}_`date +%Y%m%d%H%M`.tgz
    elif [ $DISTROTYPE = centos ]; then
	tarballname=rootfs_centos_${centos_version}_${SOCFAMILY}_${DESTARCH}_`date +%Y%m%d%H%M`.tgz
    elif [ $DISTROTYPE = buildroot ]; then
	destpath=rootfs_buildroot_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}
	tarballname=${destpath}_`date +%Y%m%d%H%M`.tgz
    elif [ $DISTROTYPE = yocto ]; then
        destpath=rootfs_yocto_${SOCFAMILY}_${DESTARCH}_${DISTROSCALE}
        tarballname=${destpath}_`date +%Y%m%d%H%M`.tgz
    fi
    echo packing $tarballname ...
    sudo tar czf $FBDIR/build/images/$tarballname *
    cd $FBDIR/build/images
    if [ $DISTROTYPE = centos ]; then
	ln -sf $tarballname $FBDIR/build/images/rootfs_centos_${centos_version}_${SOCFAMILY}_${DESTARCH}.tgz
    else
	ln -sf $tarballname $FBDIR/build/images/${destpath}.tgz
    fi
    cd $FBDIR
    fbprint_d $FBDIR/build/images/$tarballname
}

compress_app_components() {
    local appsname=${DESTDIR##*/}
    local appstarball=app_${appsname}_`date +%Y%m%d%H%M`
    echo packing ${appstarball}.tgz ...
    cd $FBDIR/build/apps/$appsname && sudo tar czf $FBDIR/build/images/${appstarball}.tgz *
    cd $FBDIR && fbprint_d $FBDIR/build/images/${appstarball}.tgz
}

merge_components() {
    [ ! -d $RFSDIR ] && echo $RFSDIR not exist, generating it .. && generate_distro_rfs
    [ $DISTROTYPE = buildroot ] && echo apps components have been installed in $RFSDIR && exit 0

    # install apps components
    if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ] && [ $DISTROSCALE = lite ] && [ $SOCFAMILY = LS ]; then
	if [ $DESTARCH = arm64 ]; then
	    echo Installing app components for $DISTROTYPE lite distro ...
	    [  -f $DESTDIR/usr/local/bin/restool ] || flex-builder -c restool -a ${DESTARCH} -f $CONFIGLIST
	    sudo mkdir -p $RFSDIR/usr/local/bin && sudo cp -f $DESTDIR/usr/local/bin/{ls-*,restool} $RFSDIR/usr/local/bin
	    [ -f $DESTDIR/usr/local/bin/fmc ] || flex-builder -c fmc -r ${DISTROTYPE}:lite -a ${DESTARCH} -f $CONFIGLIST
	    [ -f $DESTDIR/usr/local/bin/tsntool ] || flex-builder -c tsntool -r ${DISTROTYPE}:lite -a ${DESTARCH} -f $CONFIGLIST
	    sudo cp -f $DESTDIR/usr/local/bin/tsntool $RFSDIR/usr/bin && sudo cp -f $DESTDIR/usr/lib/libtsn.so $RFSDIR/usr/lib
	    [ -f $DESTDIR/usr/bin/aiop_tool ] || flex-builder -c gpp_aioptool -r ${DISTROTYPE}:lite -a ${DESTARCH} -f $CONFIGLIST
	    sudo cp -f $DESTDIR/usr/bin/aiop_tool $RFSDIR/usr/bin

	    sudo mkdir -p $RFSDIR/usr/local/fmc && sudo mkdir -p $RFSDIR/usr/local/include/fmc
	    sudo mkdir -p $RFSDIR/usr/local/lib/aarch64-linux-gnu
	    sudo cp -f $DESTDIR/usr/local/lib/aarch64-linux-gnu/libfmc.a $RFSDIR/usr/local/lib/aarch64-linux-gnu/
	    sudo cp -rf $DESTDIR/etc/systemd/system $RFSDIR/etc/systemd
	    sudo cp -f $DESTDIR/lib/systemd/system/fmc.service $RFSDIR/lib/systemd/system
	    sudo cp -f $DESTDIR/usr/local/include/fmc/fmc.h $RFSDIR/usr/local/include/fmc
	    sudo cp -f $DESTDIR/usr/local/bin/fmc $RFSDIR/usr/local/bin
	    sudo cp -f $DESTDIR/usr/local/fmc/init-ls104xa $RFSDIR/usr/local/fmc
	fi
	if [ -f $RFSDIR/etc/packages.list ] && ! grep -q 'App Component Package List' $RFSDIR/etc/packages.list; then
	   sudo sed -i "1 i\\$DISTRIB_NAME Lite App Package List:" $RFSDIR/etc/packages.list
	   [ $DESTARCH = arm64 ] && sudo sed -i "2 i\ fmc restool tsntool aiop_tool" $RFSDIR/etc/packages.list
	   sudo sed -i "3 i\ " $RFSDIR/etc/packages.list
	fi
	exit 0
    elif [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ] && [ $SOCFAMILY = LS ]; then
	if [ ! -f $DESTDIR/usr/local/bin/fmc -a $SOCFAMILY = LS ]; then
	    echo $DESTDIR/usr/local/bin not exist, building it ..
	    flex-builder -c apps -a ${DESTARCH} -f $CONFIGLIST
	fi
	if [ "$DESTDIR" != "$RFSDIR" ]; then
	    test -d $DESTDIR/usr/local/dpdk4vpp && sudo rm -rf $DESTDIR/usr/local/dpdk4vpp
	    sudo cp -rf $DESTDIR/* $RFSDIR
	fi
	if [ -f $RFSDIR/etc/packages.list ] && ! grep -q 'App Component Package List' $RFSDIR/etc/packages.list; then
	   sudo sed -i "1 i\\$DISTRIB_NAME App Component Package List:" $RFSDIR/etc/packages.list
	   sudo sed -i "2 i\ $APPS_REPO_LIST" $RFSDIR/etc/packages.list
	   sudo sed -i "3 i\ " $RFSDIR/etc/packages.list
	fi
	#[ "$ON_WSL" = n ] && sudo chroot $RFSDIR ldconfig
    elif [ $DISTROTYPE = centos ] && [ $SOCFAMILY = LS ]; then
	echo Installing restool in $DISTROTYPE ...
	[ -f $DESTDIR/usr/local/bin/restool ] || flex-builder -c restool -f $CONFIGLIST
	if [ -d $FBDIR/build/apps/components_${SOCFAMILY}_$DESTARCH/lib ]; then
	    sudo cp -rf $FBDIR/build/apps/components_${SOCFAMILY}_$DESTARCH/lib/* $RFSDIR/lib/
	    rm -rf $FBDIR/build/apps/components_${SOCFAMILY}_$DESTARCH/lib
	fi
	if [ "$DESTDIR" != "$RFSDIR" ]; then
	    sudo cp -rf $DESTDIR/* $RFSDIR
	fi
    fi

    # install kernel modules
    libmodules=$FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/lib/modules
    if [ -d $libmodules ]; then
	rm -f $FBDIR/$libmodules/*/{build,source}
	sudo mkdir -p $RFSDIR/lib/modules
	sudo rm -rf $RFSDIR/lib/modules/*
	sudo cp -rf $libmodules/* $RFSDIR/lib/modules
	sudo rm -f $RFSDIR/lib/modules/*.tgz
    fi

    # install PFE firmware to $RFSDIR/lib/firmware
    if [ $CONFIG_MACHINE_LS1012ARDB = y -o $CONFIG_MACHINE_LS1012AFRWY = y ] && [ $SOCFAMILY = LS ]; then
	if [ ! -f $FBDIR/build/firmware/pfe_bin/ls1012a/slow_path/ppfe_class_ls1012a.elf ]; then
	    flex-builder -c pfe_bin -f $CONFIGLIST
	fi
	sudo mkdir -p $RFSDIR/lib/firmware
	. $FBDIR/configs/board/ls1012ardb/manifest
	sudo cp -f $FBDIR/$pfe_kernel $RFSDIR/lib/firmware/
    fi

    # install linux headers and module headers
    if [ -d $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/output -a -d $RFSDIR/usr/include ]; then
	curbrch=`cd $KERNEL_PATH && git branch | grep ^* | cut -d' ' -f2 && cd $FBDIR`
	kernelrelease=$(cat $KERNEL_OUTPUT_PATH/$curbrch/include/config/kernel.release)
	sudo mkdir -p $RFSDIR/usr/src/linux-headers-$kernelrelease/include
	sudo cp -rf $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/output/$curbrch/usr/include/* $RFSDIR/usr/src/linux-headers-$kernelrelease/include
	sudo cp -rf $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/output/$curbrch/module-headers/* $RFSDIR/usr/src/linux-headers-$kernelrelease
	sudo rm -f $RFSDIR/usr/src/linux-headers-$kernelrelease/source
    fi

    # install perf
    if [ -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/perf ] && [ $SOCFAMILY = LS ]; then
	# Ideally should go to /usr/lib/linux-tools/${kernelrelease}
	sudo cp -f $FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/perf $RFSDIR/usr/local/bin
    fi

    if [ "$CONFIG_APP_EDGESCALE" = "y" ]; then
	if [ -f $RFSDIR/etc/rc.local ] && [ $DESTDIR/usr/local/bin/startup.sh ]; then
	    if ! grep startup.sh $RFSDIR/etc/rc.local; then
		sudo sed -i '/does nothing/a\/usr\/local\/bin\/startup.sh &' $RFSDIR/etc/rc.local
	    fi
	fi
    fi
    fbprint_d "merge kernel modules and apps components into $RFSDIR"
}

check_component_valid() {
    if ! echo $APPS_ALL_LIST misc | grep -q $1 && \
       ! echo $LINUX_ALL_LIST | grep -q $1 && \
       ! echo $FIRMWARE_REPO_LIST | grep -q $1; then
	fbprint_e "Invalid component name: $1"
	fbprint_n "Valid app component: $APPS_ALL_LIST"
	fbprint_n "Valid linux component: $LINUX_ALL_LIST"
	fbprint_n "Valid firmware component: $FIRMWARE_REPO_LIST"
	exit
    fi
}

git_repo_update() {
    if [ -n "$BUILDARG" ]; then
	check_component_valid $BUILDARG
	reponame=`echo $BUILDARG | sed 's/-/_/'`
	branch=`grep -E "^${reponame}_repo_branch" $FBDIR/configs/$CONFIGLIST | cut -d= -f2`
	commit=`grep -E "^${reponame}_repo_commit" $FBDIR/configs/$CONFIGLIST | cut -d= -f2`
	repourl=`grep -E "^${reponame}_repo_url" $FBDIR/configs/$CONFIGLIST | cut -d= -f2`
	tag=`grep -E "^${reponame}_repo_tag" $FBDIR/configs/$CONFIGLIST | cut -d= -f2`
    fi
    pkgdirlist="firmware linux apps"
    for pdn in $pkgdirlist; do
	if [ $1 = fetch ]; then
	    if [ -n "$BUILDARG" ]; then
		pkgdn=`echo $pdn | tr a-z A-Z`
		[ $pdn = apps ] && repolist=`eval echo '${'"$pkgdn"'_ALL_LIST}'` || \
		repolist=`eval echo '${'"$pkgdn"'_REPO_LIST}'`
		if ! echo $repolist | grep -q $BUILDARG; then continue; fi
		if [ -n "$branch" ]; then
		    git_repo_checkout $FBDIR/packages/$pdn $BUILDARG branch $branch $repourl
		elif [ -n "$tag" ]; then
		    git_repo_checkout $FBDIR/packages/$pdn $BUILDARG tag $tag $repourl
		elif [ -n "$commit" ]; then
		    git_repo_checkout $FBDIR/packages/$pdn $BUILDARG commit $commit $repourl
		fi
	    else
		make -C $FBDIR/packages/$pdn repo_fetch
	    fi
	elif [ $1 = latest ]; then
	    if [ -n "$BUILDARG" -a -z "$branch" -a -n "$commit" ]; then
                echo commit = $commit; break;
	    elif [ -n "$BUILDARG" -a -z "$branch" ]; then
		echo branch of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" -a -n "$branch" ] && [ -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		cd $FBDIR/packages/$pdn/$BUILDARG && git pull origin $branch && git fetch --tags && cd -
	    elif [ -n "$BUILDARG" ] && [ ! -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		continue
	    else
		make -C $FBDIR/packages/$pdn repo_update_latest
	    fi
	elif [ $1 = commit ]; then
	    if [ -n "$BUILDARG" -a -z "$commit" ]; then
		echo commit of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" ] && [ ! -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		continue;
	    elif [ -n "$BUILDARG" -a -n "$commit" ] && [ -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		git_repo_checkout $FBDIR/packages/$pdn $BUILDARG commit $commit
	    else
		make -C $FBDIR/packages/$pdn repo_update_commit
	    fi
	elif [ $1 = tag ]; then
	    if [ -n "$BUILDARG" -a -z "$tag" ]; then
		echo tag of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" ] && [ ! -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		continue;
	    elif [ -n "$BUILDARG" -a -n "$tag" ] && [ -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		git_repo_checkout packages/$pdn $BUILDARG tag $tag
	    else
		make -C $FBDIR/packages/$pdn repo_update_tag
	    fi
	elif [ $1 = branch ]; then
	    if [ -n "$BUILDARG" -a -z "$branch" ]; then
		echo branch of $BUILDARG repo is not specified in $CONFIGLIST!; exit
	    elif [ -n "$BUILDARG" -a -n "$branch" ] && [ -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		git_repo_checkout $FBDIR/packages/$pdn $BUILDARG branch $branch
	    elif [ -n "$BUILDARG" ] && [ ! -d $FBDIR/packages/$pdn/$BUILDARG ]; then
		continue;
	    else
		make -C $FBDIR/packages/$pdn repo_update_branch
	    fi
	fi
    done
}

git_repo_checkout() {
# $1:pkgdir, $2:gittree, $3:type of branch/tag/commit, $4:name of branch/tag/commit, $5:repo_url
    cd $1
    repourl=`eval echo '${'"$2""_repo_url"'}'`
    [ -z "$repourl" ] && repourl=$GIT_REPOSITORY_URL/$2

    if [ ! -d $2 ]; then
	if [ $3 = branch ]; then
	    if [ -n "$5" ]; then
		git clone $5 $2 -b $4
	    else
		git clone $repourl -b $4
	    fi
	elif [ $3 = tag -o $3 = commit ]; then
	    if [ -n "$5" ]; then
		git clone $5 && cd $2 && git checkout $4 -b $4
	    else
		git clone $repourl && cd $2 && git checkout $4 -b $4
	    fi
	fi
    else
	cd $2
	if ! git show-ref --verify --quiet refs/heads/$4; then
	    if [ $3 = branch ]; then
		git checkout remotes/origin/$4 -b $4
	    elif [ $3 = tag -o $3 = commit ]; then
		git checkout $4 -b $4
	    fi
	else
	    git checkout $4
	fi
    fi
    cd $FBDIR
}

check_binfmt_module() {
    if ! cat /proc/filesystems | grep binfmt_misc 1>/dev/null; then
	sudo modprobe binfmt_misc
    fi
}

flexbuild_launch_docker() {
    dnum=$(echo $FBDIR | md5sum | cut -b 1-6)
    containername=${username}_${fbdockerrepo}_${DISTRIB_VERSION}_${dnum}
    if ! docker ps -a | grep -q $containername; then
	if ! docker ps -a | grep -q ' ${fbdockerrepo}:${fbdockerimgversion}'; then
	    cd $FBDIR/docker/${fbdockerrepo:2}/${fbdockerimgversion} && make && cd -
	fi && \
	docker run -t -i -h fbubuntu --name="$containername" --privileged=true --net=host \
	       -v $HOME:$HOME -v $FBDIR:$FBDIR -v /lib/modules:/lib/modules -v /dev:/dev \
	       -w $FBDIR ${fbdockerrepo}:${fbdockerimgversion} /bin/bash
    elif docker ps -a | grep $containername | grep -q Exited; then
	docker start $containername
	docker attach $containername
    else
	docker attach $containername
    fi
}

generate_kernel_img() {
    if [ $DESTARCH = arm64 -o $DESTARCH = arm32 ]; then
	if [ $CONFIG_APP_EDGESCALE = y -o $DISTROSCALE = edgescale ]; then
	    flex-builder -c linux -a $DESTARCH -p $SOCFAMILY -B fragment:edgescale_demo_kernel.config -f $CONFIGLIST
	else
	    flex-builder -c linux -a $DESTARCH -p $SOCFAMILY -f $CONFIGLIST
	fi
    elif [ $DESTARCH = ppc64 -o $DESTARCH = ppc32 ]; then
	flex-builder -c linux -a $DESTARCH -f $CONFIGLIST

    fi
    libmodules=$FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY/lib/modules
    module_name=$(echo `ls -t $libmodules` | cut -d' ' -f1)
    if [ -n "$module_name" ]; then
	export MODULES_VERSION=$module_name
    fi
}

generate_composite_fw_uboot() {
    # generate uboot-based composite firmware
    if [ $SOCFAMILY = LS ]; then
	for brd in $machinelist; do
	    if [ $DESTARCH = arm64 -a $brd = ls1021atwr ]; then continue; fi
	    if [ $DESTARCH = arm32 -a $brd != ls1021atwr ]; then continue; fi
	    for boottype in $boottypelist; do
		if [ "$1" = "secureboot" ]; then
		    flex-builder -i mkfw -m $brd -b $boottype -B uboot -s -a $DESTARCH -f $CONFIGLIST
		else
		    flex-builder -i mkfw -m $brd -b $boottype -B uboot -a $DESTARCH -f $CONFIGLIST
		fi
	    done
	done
    fi

    if [ $SOCFAMILY = IMX ]; then
	imxlist32=`grep CONFIG_MACHINE_IMX6 $FBDIR/configs/$CONFIGLIST |grep y|cut -b 16-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
	imxlist64=`grep CONFIG_MACHINE_IMX8 $FBDIR/configs/$CONFIGLIST |grep y|cut -b 16-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
	if [ $DESTARCH = arm64 ]; then
	    imxlist=$imxlist64
	elif [ $DESTARCH = arm32 ]; then
	    imxlist=$imxlist32
	fi
	for brd in $imxlist; do
	    flex-builder -i mkfw -m $brd -p imx -f $CONFIGLIST
	done
    fi
}

generate_composite_fw_uefi() {
    # generate UEFI-based composite firmware
    if [ $MACHINE = all ]; then
	uefibrdlist=$uefi_machine_list
    elif [ $MACHINE = ls1043ardb -o $MACHINE = ls1046ardb -o $MACHINE = ls2088ardb -o $MACHINE = lx2160ardb ]; then
	uefibrdlist=$MACHINE
    else
	uefibrdlist=""
    fi
    for brd in $uefibrdlist; do
	if ! echo $LS_MACHINE_LIST | grep -q $brd; then continue; fi
	if [ $DESTARCH = arm32 ]; then continue; fi
	for boottype in $boottypelist; do
	    flex-builder -i mkfw -m $brd -b $boottype -B uefi -a $DESTARCH -f $CONFIGLIST
	done
    done
}

generate_distro_boot_script() {
    # generate distro boot.scr
    if [ $DESTARCH = arm32 -a $SOCFAMILY = LS ]; then
	generate_distro_bootscr ls1021atwr
    else
	for brd in $machinelist; do
	    generate_distro_bootscr $brd
	done
    fi
}


generate_qoriq_all_firmware() {
    [ -f $FBDIR/$kernel_img ] || generate_kernel_img layerscape

    # build phy-firmware, mc-firmware for <machine>
    flex-builder -c bin_firmware -m $MACHINE -a $DESTARCH -f $CONFIGLIST

    # generate distro uboot bootscr
    generate_distro_boot_script

    # generate uefi-based composite firmware
    test $DESTARCH = arm64 && generate_composite_fw_uefi

    # generate uboot-based composite firmware without secureboot support
    generate_composite_fw_uboot

    # generate uboot-based composite firmware with secureboot support
    if [ "$CONFIG_APP_CST" = "y" ]; then
	generate_composite_fw_uboot secureboot
    fi

    fbprint_d "$DESTARCH: Build all composite firmware"
}

build_ubuntu_lite() {
    flex-builder -i mkrfs -r ubuntu:lite:$CODENAME -a $DESTARCH -f $CONFIGLIST
    flex-builder -i merge-component -r ubuntu:lite:$CODENAME -a $DESTARCH -f $CONFIGLIST
    flex-builder -i packrfs -r ubuntu:lite:$CODENAME -a $DESTARCH -f $CONFIGLIST
}

build_rfs_apps() {
    # $1: imx or layerscape
    if [ "$BUILD_UBUNTU_LITE" = "y" ]; then
	build_ubuntu_lite
    fi

    if [ ! -f $RFSDIR/etc/buildinfo ]; then
	flex-builder -i mkrfs -r $DISTROTYPE:$DISTROSCALE -a $DESTARCH -p $1 -f $CONFIGLIST
	if [ "$BUILD_UBUNTU_DEVEL" = "y" -a $DISTROSCALE != devel ]; then
	    echo Building for ubuntu:devel userland ...
	    flex-builder -i mkrfs -r ubuntu:devel -a $DESTARCH -p $1 -f $CONFIGLIST
	    [ "$CONFIG_APP_DOCKER_CE" = y ] && flex-builder -c docker_ce -r ubuntu:devel -a $DESTARCH -p $1 -f $CONFIGLIST
	    [ "$CONFIG_APP_WESTON" = y ] && flex-builder -c weston -r ubuntu:devel -a $DESTARCH -p $1 -f $CONFIGLIST
	fi
    fi

    if [ $1 = layerscape ]; then
	flex-builder -c apps -r $DISTROTYPE:$DISTROSCALE -a $DESTARCH -p $1 -f $CONFIGLIST
    fi
}

merge_apps_to_rfs() {
    # $1: layerscape or imx
    flex-builder -i merge-component -r $DISTROTYPE:$DISTROSCALE -a $DESTARCH  -p $1 -f $CONFIGLIST

    if [ "$BUILD_UBUNTU_DEVEL" = "y" -a $DISTROSCALE != devel ]; then
	flex-builder -i merge-component -r ubuntu:devel -a $DESTARCH -p $1 -f $CONFIGLIST
    fi

    if [ $hostarch = x86_64 -o $hostarch = i686 ]; then
	if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	    flex-builder -i packrfs -r $DISTROTYPE:$DISTROSCALE -a $DESTARCH -p $1 -f $CONFIGLIST
	    if [ "$BUILD_UBUNTU_DEVEL" = "y" -a $DISTROSCALE != devel ]; then
		flex-builder -i packrfs -r ubuntu:devel -a $DESTARCH -p $1 -f $CONFIGLIST
	    fi
	fi
	if [ "$BUILD_GUESTRFS" = "y" -a $SOCFAMILY = LS ] && [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	    flex-builder -i mkguestrfs -a $DESTARCH -p $1 -B 3G -f $CONFIGLIST
	fi
    fi
    fbprint_d "$DESTARCH: Build $DISTROTYPE userland and apps components in $FBDIR/build/images!"
}

flex_auto_build() {
    [ -n "$BUILDARG" ] && fbprint_w "Warning: ignored invalid -B $BUILDARG for autobuild; unset BUILDARG"
    echo "Time of updating repo: `date`"
    [ -d $FBDIR/.git ] && echo Flexbuild HEAD commit: `git log -1 --oneline`

    flex-builder -i repo-fetch -f $CONFIGLIST

    if [ "$UPDATE_REPO_PER_TAG" = y ]; then
	flex-builder -i repo-tag -f $CONFIGLIST
    elif [ "$UPDATE_REPO_PER_COMMIT" = y ]; then
	flex-builder -i repo-commit -f $CONFIGLIST
    else
	# update all repos to latest commit by default
	flex-builder -i repo-update -f $CONFIGLIST
    fi

    echo "Time of start build: `date`"
    starttime=`date +'%Y-%m-%d %H:%M:%S'`

    check_linux_config

    if [ $SOCFAMILY = LS ]; then
	generate_kernel_img
	[ $DESTARCH = arm64 ] && flex-builder -c perf -a $DESTARCH -f $CONFIGLIST
	flex-builder -i mkflashscr -f $CONFIGLIST
	
	# fmc and tsntool are built against yocto:devel only, then install them into yocto:tiny
	[ "$BUILD_YOCTO_RFS" = "y" ] && flex-builder -i clean-rfs -r yocto && \
	flex-builder -i mkrfs -r yocto:devel -a $DESTARCH -f $CONFIGLIST && \
	flex-builder -i mkrfs -r yocto:tiny -a $DESTARCH -f $CONFIGLIST

	generate_qoriq_all_firmware
	flex-builder -i mkbootpartition -a $DESTARCH -p layerscape -s -f $CONFIGLIST  # for secure boot without IMA-EVM feature
	build_rfs_apps layerscape

	if [ "$BUILD_UBUNTU_MATE" = y -a $DESTARCH = arm64 ]; then
	    flex-builder -i mkrfs -r ubuntu:mate -f $CONFIGLIST && flex-builder -c apps -r ubuntu:mate -f $CONFIGLIST && \
	    flex-builder -i merge-component -r ubuntu:mate -f $CONFIGLIST && flex-builder -i packrfs -r ubuntu:mate -f $CONFIGLIST
	fi
    fi

    if [ "$BUILD_DUAL_KERNEL" = "y" ] && [ -d $KERNEL_PATH ] && [ $SOCFAMILY = LS ]; then
	cd $KERNEL_PATH
	if [ -n "$second_linux_repo_tag" ] && [ "`cat .git/HEAD | cut -d/ -f3`" != "$second_linux_repo_tag" ]; then
	    echo swithing to $second_linux_repo_tag ...
	    if git show-ref --verify --quiet refs/heads/$second_linux_repo_tag; then
		git checkout $second_linux_repo_tag
	    else
		git checkout $second_linux_repo_tag -b $second_linux_repo_tag
	    fi
	elif [ "$DATE_REPO_PER_COMMIT" = "y" -a -n "$second_linux_repo_commit" ] && \
	     [ "`cat .git/HEAD | cut -d/ -f3`" != "$second_linux_repo_commit" ]; then
	    echo swithing to commit $second_linux_repo_commit ...
	    if git show-ref --verify --quiet refs/heads/$second_linux_repo_commit; then
		git checkout $second_linux_repo_commit
	    else
		git checkout $second_linux_repo_commit -b $second_linux_repo_commit
	    fi
	elif [ -n "$second_linux_repo_branch" ] && [ "`cat .git/HEAD | cut -d/ -f3`" != "$second_linux_repo_branch" ]; then
	    echo swithing to $second_linux_repo_branch ...
	    if git show-ref --verify --quiet refs/heads/$second_linux_repo_branch; then
		git checkout $second_linux_repo_branch
	    else
		git checkout remotes/origin/$second_linux_repo_branch -b $second_linux_repo_branch
	    fi
	fi

	# build the second version of linux kernel and apps
	cd $FBDIR && generate_kernel_img
	[ "$CONFIG_KERL_PERF" = "y" -a $DESTARCH = arm64 ] && flex-builder -c perf -a $DESTARCH -f $CONFIGLIST
	[ "$CONFIG_APP_SECURE_OBJ" = "y" -a $DESTARCH = arm64 ] && flex-builder -c secure_obj -f $CONFIGLIST

	#generate composite firmware with second version of linux kernel
	generate_composite_fw_uefi
	generate_composite_fw_uboot
	[ "$CONFIG_APP_CST" = "y" ] && generate_composite_fw_uboot secureboot
	flex-builder -i mkbootpartition -a $DESTARCH -p $SOCFAMILY -s -f $CONFIGLIST  # for secure boot without IMA-EVM feature
    fi

    [ $SOCFAMILY = LS ] && merge_apps_to_rfs layerscape

    if [ $SOCFAMILY = IMX ]; then
	flex-builder -i mkdistroscr -p $SOCFAMILY -f $CONFIGLIST
	flex-builder -i mkbootpartition -a $DESTARCH -p $SOCFAMILY -f $CONFIGLIST
	build_rfs_apps imx
	merge_apps_to_rfs imx
    fi
    
    [ "$BUILD_BUILDROOT_RFS" = "y" ] && flex-builder -i mkrfs -r buildroot:tiny -a $DESTARCH -f $CONFIGLIST && \
    flex-builder -i mklinux -r buildroot:tiny -a $DESTARCH -f $CONFIGLIST

    cp $FBDIR/tools/flex-installer $FBDIR/build/images
    [ -f $FBDIR/packages/rfs/initrd/rootfs_yocto_${DESTARCH}_tiny.cpio.gz ] && \
    cp $FBDIR/packages/rfs/initrd/rootfs_yocto_${DESTARCH}_tiny.cpio.gz $FBDIR/build/images
    ls -l $FBDIR/build/images

    fbprint_n "Build Done: `date`"
    endtime=`date +'%Y-%m-%d %H:%M:%S'`
    start_seconds=$(date --date="$starttime" +%s)
    end_seconds=$(date --date="$endtime" +%s)
    spent=$((end_seconds-start_seconds))
    mins=`expr $(echo $(($spent))) / 60`
    secs=`expr $(echo $(($spent))) % 60`
    fbprint_n "Auto build for $DESTARCH: $mins minutes $secs seconds !"
}

flex_autobuild_all() {
    flex-builder -i auto_build -a $DESTARCH -f $CONFIGLIST 2>&1 | \
		 tee $FBDIR/logs/autobuild-${DESTARCH}-log-`date +%Y%m%d%H%M`.txt
}

secure_sign_image() {
    # $1: <machine>,  $2: <boottype>
    if [ -f $FBDIR/configs/board/$1/manifest ]; then
	. $FBDIR/configs/board/$1/manifest
    else
	echo $FBDIR/configs/board/$1/manifest not exist!
	exit
    fi
    if [ ! -d $FBDIR/packages/apps/cst ]; then
	echo $FBDIR/packages/apps/cst not exist, build it ...
	flex-builder -c cst -a $DESTARCH -f $CONFIGLIST
    fi
    
    if [ ! -f $FBDIR/$distro_bootscript ]; then
	echo $FBDIR/$distro_bootscript not exist, generating it ...
	flex-builder -i mkdistroscr -m $1 -a $DESTARCH -f $CONFIGLIST
    fi
    if [ "$IMA_EVM" = "y" -a ! -f $FBDIR/$bootscript_enforce ]; then
	flex-builder -i mkdistroscr -t -m $1 -a $DESTARCH -f $CONFIGLIST
    fi

    if [ ! -f $FBDIR/$kernel_img ]; then
	echo $FBDIR/$kernel_img not exist, generating it ...
	generate_kernel_img
	flex-builder -i mklinux -a $DESTARCH -p $SOCFAMILY -f $CONFIGLIST
    fi

    fbprint_n "Signing $2boot images for $1 ..."
    [ "$ENCAP" = "y" ] && cp $FBDIR/$bootscript_dec $FBDIR/packages/apps/cst/bootscript_dec && echo "Copying bootscript_decap"

    if [ "$IMA_EVM" = "y" ]; then
	[ -f $FBDIR/packages/rfs/initrd/initramfs_imaevm_${DESTARCH}.img ] || \
	flex-builder -i mkrfs -r buildroot:imaevm -a $DESTARCH -f $CONFIGLIST
	cp -f $FBDIR/packages/rfs/initrd/initramfs_imaevm_${DESTARCH}.img $FBDIR/build/images
	cp -f $FBDIR/packages/rfs/initrd/initramfs_imaevm_${DESTARCH}.img \
	$FBDIR/packages/apps/cst/initramfs.img && echo "Copying initramfs.img"
	cp -f $FBDIR/$bootscript_enforce $FBDIR/packages/apps/cst/bootscript_enforce && echo "Copying bootscript_enforce"
    fi

    rm -f $FBDIR/build/firmware/secboot_hdrs/$1/*
    rm -f $FBDIR/packages/apps/cst/bootscript && rm -f $FBDIR/packages/apps/cst/uImage.dtb
    rm -f $FBDIR/packages/apps/cst/uImage.bin && rm -f $FBDIR/packages/apps/cst/kernel.itb
    rm -f $FBDIR/packages/apps/cst/secboot_hdrs*.bin && rm -f $FBDIR/packages/apps/cst/hdr*.out
    cp -f $FBDIR/$distro_bootscript $FBDIR/packages/apps/cst/bootscript && echo "Copying bootscript"
    cp -f $FBDIR/$device_tree $FBDIR/packages/apps/cst/uImage.dtb && echo "Copying dtb"
    cp -f $FBDIR/build/images/lsdk_linux_${DESTARCH}_${SOCFAMILY}_tiny.itb $FBDIR/packages/apps/cst/kernel.itb && echo "Copying kernel_itb"
    cp -f $FBDIR/$kernel_img $FBDIR/packages/apps/cst/uImage.bin && echo "Copying kernel"

    rcwimg_sec=`eval echo '${'"rcw_""$2"'_sec}'`
    rcwimg_nonsec=`eval echo '${'"rcw_""$2"'}'`
    if [ -z "$rcwimg_nonsec" -o "$rcwimg_nonsec" = "null" ]; then
	echo ${2}boot on $1 is not supported!; exit
    fi

    # for platforms without ATF support
    if [ $1 = ls1021atwr ]; then
	ubootimg_sec=`eval echo '${'"uboot_""$2"'boot_sec}'`
	if [ -z "$ubootimg_sec" -o "$ubootimg_sec" = "null" ]; then
	    echo ${2}boot on $1 for secureboot unsupported; exit
	fi
	[ -f $FBDIR/$ubootimg_sec ] || flex-builder -c u-boot -m $1 -b $2 -f $CONFIGLIST
	if [ $2 = nor -o $2 = qspi ]; then
	    cp $FBDIR/$ubootimg_sec $FBDIR/packages/apps/cst/u-boot-dtb.bin
	elif [ $2 = sd -o $2 = emmc ]; then
	    if [ "$uboot_sdboot_sec" = "null" -o -z "$uboot_sdboot_sec" ]; then
		echo ${2}boot on $1 for secureboot unsupported; exit
	    fi
	    [ -f $FBDIR/$uboot_sdboot_sec ] || flex-builder -c u-boot -m $1 -b $2 -f $CONFIGLIST
	    cp -f $FBDIR/$uboot_sdboot_sec $FBDIR/packages/apps/cst/u-boot-with-spl-pbl.bin
	    cp -f $FBDIR/$uboot_spl $FBDIR/packages/apps/cst/u-boot-spl.bin
	    cp -f $FBDIR/$uboot_dtb $FBDIR/packages/apps/cst/u-boot-dtb.bin
	fi
    fi

    test -f $FBDIR/$pfe_fw && cp $FBDIR/$pfe_fw $FBDIR/packages/apps/cst/pfe.itb && echo "Copying PFE"

    if [ ${1:0:7} = ls1088a -o ${1:0:7} = ls2088a -o ${1:0:7} = lx2160a ]; then
	test -f $FBDIR/$dpaa2_mc_fw || flex-builder -c mc_bin -f $CONFIGLIST
	test -f $FBDIR/$dpaa2_mc_dpc || flex-builder -c mc_utils -f $CONFIGLIST
    fi
    test -f $FBDIR/$dpaa2_mc_fw && cp $FBDIR/$dpaa2_mc_fw $FBDIR/packages/apps/cst/mc.itb
    test -f $FBDIR/$dpaa2_mc_dpc && cp $FBDIR/$dpaa2_mc_dpc $FBDIR/packages/apps/cst/dpc.dtb
    test -f $FBDIR/$dpaa2_mc_dpl && cp $FBDIR/$dpaa2_mc_dpl $FBDIR/packages/apps/cst/dpl.dtb
    mkdir -p  $FBDIR/build/firmware/secboot_hdrs/$1
    test -f $FBDIR/packages/apps/cst/uni_sign || flex-builder -c cst -a $DESTARCH -f $CONFIGLIST
    cd $FBDIR/packages/apps/cst
    if [ $2 = nand -a -n "$nand_script" ] ; then
	. $nand_script
    elif [ $2 = sd -o $2 = emmc ] && [ -n "$sd_script" ] ; then
	. $sd_script
    elif [ $2 = nor -a -n "$nor_script" ] ; then
	. $nor_script
    elif [ $2 = qspi -a -n "$qspi_script" ] ; then
	. $qspi_script
    elif [ $2 = xspi -a -n "$xspi_script" ] ; then
	. $xspi_script
    fi

    [ ${1:0:6} = ls1028 ] && cp $FBDIR/packages/apps/cst/secboot_hdrs.bin $FBDIR/build/firmware/secboot_hdrs/$1/secboot_hdrs_${2}boot.bin || \
    cp $FBDIR/packages/apps/cst/secboot_hdrs_${2}boot.bin $FBDIR/build/firmware/secboot_hdrs/$1

    cp -f $FBDIR/packages/apps/cst/hdr_dtb.out $FBDIR/build/firmware/secboot_hdrs/$1
    cp -f $FBDIR/packages/apps/cst/hdr_linux.out $FBDIR/build/firmware/secboot_hdrs/$1
    test $1 = ls1012afrwy && cp $FBDIR/packages/apps/cst/hdr_kernel.out $FBDIR/build/firmware/secboot_hdrs/$1
    cp -f $FBDIR/packages/apps/cst/hdr_bs.out $FBDIR/build/firmware/secboot_hdrs/$1/hdr_${1}_bs.out
    cp -f $FBDIR/packages/apps/cst/srk_hash.txt $FBDIR/build/images
    cp -f $FBDIR/packages/apps/cst/srk.pri $FBDIR/build/images
    cp -f $FBDIR/packages/apps/cst/srk.pub $FBDIR/build/images
    [ "$ENCAP" = "y" ] && cp -f $FBDIR/packages/apps/cst/hdr_bs_dec.out $FBDIR/build/firmware/secboot_hdrs/$1/hdr_${1}_bs_dec.out
    if [ "$IMA_EVM" = "y" ]; then
	cp -f $FBDIR/packages/apps/cst/hdr_bs_enf.out $FBDIR/build/firmware/secboot_hdrs/$1/hdr_${1}_bs_enf.out
	cp -f $FBDIR/packages/apps/cst/hdr_initramfs.out $FBDIR/build/firmware/secboot_hdrs/$1/
    fi

    fbprint_d "sign image for $1 ${2}boot"
}

generate_composite_firmware_2M() {
    # generate machine-specific firmware to adapt to small footprint flash media, e.g. on LS1012A-FRWY
    # $1: machine name
    # $2: boot type: nor, sd, qspi, xspi, nand
    # $3: bootloader type: uboot or uefi
    # $4: optional argument, e.g. for 512mb

    echo "Generating $2boot composite firmware image for $1 ..."
    [ ! -f $FBDIR/configs/board/$1/manifest ] && echo $FBDIR/configs/board/$1/manifest not exist! && exit 1

    . $FBDIR/configs/board/$1/manifest

    [ "$SECURE" = y ] && fwimg=$FBDIR/build/images/firmware_${1}_${3}_${2}boot_secure || \
    fwimg=$FBDIR/build/images/firmware_${1}_${3}_${2}boot

    if [ "$SECURE" = y ]; then
	bl2img=`eval echo '${'"atf_bl2_""$2"'_sec}'`
	fipimg=`eval echo '${'"atf_fip_""$3"'_sec}'`
    else
	bl2img=`eval echo '${'"atf_bl2_""$2"'}'`
	fipimg=`eval echo '${'"atf_fip_""$3"'}'`
    fi

    if [ "$4" = 512mb ]; then
	if [ "$SECURE" = y ]; then
	    fwimg=$FBDIR/build/images/firmware_${1}_512mb_${3}_${2}boot_secure
	    bl2img=build/firmware/atf/ls1012afrwy_512mb/bl2_$2_sec.pbl
	    fipimg=build/firmware/atf/ls1012afrwy_512mb/fip_uboot_sec.bin
	else
	    fwimg=$FBDIR/build/images/firmware_${1}_512mb_${3}_${2}boot
	    bl2img=build/firmware/atf/ls1012afrwy_512mb/bl2_$2.pbl
	    fipimg=build/firmware/atf/ls1012afrwy_512mb/fip_uboot.bin
	fi
    fi

    [ -f $fwimg ] && rm -f $fwimg
    [ -z "$bl2img" ] && echo ${3} ${2}boot on $1 based on ATF: unsupported! && exit
    if [ ! -f $bl2img -o ! -f $fipimg ] || \
       `cd $FBDIR/packages/firmware/atf && git status -s|grep -qiE 'M|A|D' && cd - 1>/dev/null`; then
	[ "$SECURE" = y ] && flex-builder -c atf -m $1 -b $2 -s -f $CONFIGLIST || flex-builder -c atf -m $1 -b $2 -f $CONFIGLIST
    fi


    # 1. program ATF bl2
    [ $2 = sd -o $2 = emmc ] && dd if=$FBDIR/$bl2img of=$fwimg bs=512 seek=$sd2_rcw_offset || \
    dd if=$FBDIR/$bl2img of=$fwimg bs=1K seek=0

    # 2. reserved

    # 3. program Ethernet firmware,  e.g. PFE on LS1012A-FRWY
    if [ "$pfe_fw" != "null" -a -n "$pfe_fw" ]; then
	test -f $FBDIR/$pfe_fw || flex-builder -c pfe_bin -f $CONFIGLIST
	if [ $2 = nor -o $2 = qspi -o $2 = xspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor2_eth_firmware_offset))) / 1024`
	    dd if=$FBDIR/$pfe_fw of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$pfe_fw of=$fwimg bs=512 seek=$sd2_eth_firmware_offset
	fi
    fi

    # 4. ATF FIP image
    if [ $2 = sd -o $2 = emmc ]; then
	dd if=$FBDIR/$fipimg of=$fwimg bs=512 seek=$sd2_fip_offset
    else
	val=`expr $(echo $(($nor2_fip_offset))) / 1024`
	dd if=$FBDIR/$fipimg of=$fwimg bs=1K seek=$val
    fi

    # 5. program bootloader environment varialbe
    if [ $3 = uefi ] ; then
	if [ "$uefi_env" != "null" -a -n "$uefi_env" ]; then
	    if [ $2 = nor -o $2 = qspi -o $2 = xspi ]; then
		val=`expr $(echo $(($nor2_bootloader_env_offset))) / 1024`
		dd if=$FBDIR/$uefi_env of=$fwimg bs=1K seek=$val
	    elif [ $2 = sd -o $2 = emmc ]; then
		dd if=$FBDIR/$uefi_env of=$fwimg bs=512 seek=$sd2_bootloader_env_offset
	    fi
	fi
    fi

    # 6. reserved 0x1E0000 64KB

    # 7. program secure boot headers
    secureboot_headers=`eval echo '${'"secureboot_headers_""$2"'}'`
    if [ "$secureboot_headers" != null -a -n "$secureboot_headers" ] && [ "$SECURE" = "y" ]; then
	if [ ! -f $FBDIR/$distro_bootscript ]; then
	    flex-builder -i mkdistroscr -m $1 -a $DESTARCH -f $CONFIGLIST
	fi
	flex-builder -i signimg -m $1 -b $2 -a $DESTARCH -f $CONFIGLIST
	if [ $2 = nor -o $2 = qspi -o $2 = nand ]; then
	    val=`expr $(echo $(($nor2_secureboot_headers_offset))) / 1024`
	    dd if=$FBDIR/$secureboot_headers of=$fwimg bs=1K seek=$val
	elif [ $2 = sd -o $2 = emmc ]; then
	    dd if=$FBDIR/$secureboot_headers of=$fwimg bs=512 seek=$sd2_secureboot_headers_offset
	fi
    fi

    if [ $2 = sd -o $2 = emmc ]; then
	tail -c +4097 $fwimg > $fwimg.img && rm $fwimg
    else
	mv $fwimg $fwimg.img
    fi
    echo -e "${GREEN} $fwimg.img   [Done]\n${NC}"
}

check_machine_boottype() {
    [ -z "$BOOTTYPE" -a $SOCFAMILY = LS ] && echo "please specify -b parameter for BOOTTPYE" && exit 1
    if [ $SOCFAMILY = LS ] && [ $BOOTTYPE != sd -a $BOOTTYPE != emmc -a $BOOTTYPE != nor -a $BOOTTYPE != qspi -a $BOOTTYPE != xspi -a $BOOTTYPE != nand -a $BOOTTYPE != tfa ]; then
	echo valid parameter of '-b': sd, emmc, qspi, xspi, nor, nand, tfa && exit 1
    fi
}

check_proxy() {
    aptfile=$1/etc/apt/apt.conf
    for hproto in http https; do
	hproxy=${hproto}_proxy && hproxy=`eval echo '${'"$hproto""_proxy"'}'`
	if [ -n "$hproxy" ]; then
	    [ -f $aptfile ] || sudo touch $aptfile
	    if ! grep -q ^Acquire::$hproto::proxy $aptfile; then
		echo "Acquire::$hproto::proxy \"$hproxy/\";" | sudo tee -a $aptfile 1>/dev/null
	    fi
	fi
    done
}

check_ubuntu_version() {
    minversion=18.04
    if [ ! -f /etc/os-release ] || [ ! `cat /etc/os-release | grep ^ID=ubuntu` ]; then
	fbprint_e "The host is not Ubuntu $minversion system, please install docker and run 'flex-builder docker' to build in Docker"
	exit
    else
	if [ ! -f /usr/bin/lsb_release ]; then
	    fbprint_e "lsb-release package is not installed yet, installing it ..."
	    sudo apt install lsb-release
	fi
	[ ! -f /usr/bin/lsb_release ] && fbprint_e "lsb_release command is not found" && exit
	releaseVersion=$(lsb_release -rs)
	if [ "$releaseVersion" != "$minversion" ]; then
	    result=$(echo "$releaseVersion < $minversion" | bc)
	    if [ "$result" -eq "1" ]; then
		fbprint_e "The version of distro on this host is older than Ubuntu $minversion, please upgrade it or install docker and run 'flex-builder docker' to build in Docker"
		exit
	    else
		echo The host is Ubuntu $releaseVersion !
	    fi
	fi
    fi
}


check_host_dependent_pkg() {
    dependent_pkg="git u-boot-tools device-tree-compiler autoconf automake dh-autoreconf libssl-dev openssl python-pip flex bison bc qemu-utils libncurses5-dev python-crypto libpcap-dev curl parted libicu-dev libtclap-dev android-tools-fsutils rpm2cpio xutils-dev libwayland-bin cmake locales pkg-config texinfo chrpath diffstat chrpath gawk"
    for pkg in $dependent_pkg; do
	if ! dpkg-query -l $pkg | grep -q ii; then
	    echo installing $pkg ..
	    sudo apt-get -y install $pkg
	fi
    done

    #install python lib six depended by building ovs_dpdk
    if ! pip show -q six; then
	echo installing python lib six
	pip install six
    fi

    if ! which tclsh 1>/dev/null; then
	sudo apt-get -y install tclsh
    fi

    touch $FBDIR/logs/.deppkgdone
}

check_linux_config() {
    if [ $DESTARCH = arm32 ]; then
	tarch=arm
    elif [ $DESTARCH = arm64 ]; then
	tarch=arm64
    elif [ $DESTARCH = ppc64 -o $DESTARCH = ppc32 ]; then
	tarch=powerpc
    fi
    if [ "$CONFIG_APP_EDGESCALE" = "y" ]; then
	if [ ! -f $FBDIR/packages/apps/edgescale_eds/edgescale_demo_kernel.config ]; then
	    flex-builder -i repo-fetch -B edgescale_eds -f $CONFIGLIST
	fi
	if [ ! -f $KERNEL_PATH/arch/$tarch/configs/edgescale_demo_kernel.config ]; then
	    cp -f $FBDIR/packages/apps/edgescale_eds/edgescale_demo_kernel.config $KERNEL_PATH/arch/$tarch/configs
	fi
    fi

    if [ "$DISTROTYPE" = android ]; then
	cp -f $FBDIR/configs/linux/android_kernel_fragment.config $KERNEL_PATH/arch/$tarch/configs
    fi
}

do_clean() {
    rm -rf $FBDIR/build/firmware
    rm -rf $FBDIR/build/linux
    sudo rm -rf $FBDIR/build/apps
    rm -rf $FBDIR/build/images
    sudo rm -rf $RFSDIR/lib/modules/*
    fbprint_d "cleaned all old images except distro rootfs"
}

show_lists() {
    echo -e "\nBuild Config:"
    echo -e "\t$CONFIGLIST"
    echo -e "\nEnabled Machine List:"
    echo -e "\t$LS_MACHINE_LIST"
    echo -e "\nEnabled Firmware Components List:"
    echo -e "\t$FIRMWARE_REPO_LIST"
    echo -e "\nEnabled App Components List:"
    echo -e "\t$APPS_REPO_LIST"
    echo -e "\nEnabled Linux Components List:"
    echo -e "\t$LINUX_REPO_LIST"
}

fbprint_e() {
    echo -e "${RED} $1 ${NC}"
}

fbprint_n() {
    echo -e "${green} $1 ${NC}"
}

fbprint_w() {
    echo -e "${YELLOW} $1 ${NC}"
}

fbprint_d() {
    echo -e "${GREEN} $1     [Done] ${NC}"
}

username=`whoami`
hostarch=`uname -m`
red='\e[0;41m'
RED='\e[1;31m'
GREEN='\e[1;32m'
green='\e[0;32m'
yellow='\e[5;43m'
YELLOW='\e[1;33m'
NC='\e[0m'

[ $# -eq 0 ] && usage && exit
DESTARCH=arm64

ARGS=`getopt -a -o m:j:a:b:c:f:r:i:p:B:setkvh -l machine:,jobs:,arch:,boottype:,component:,cfgfile:,rootfs:,instruction:,portfolio:,buildarg:,secure,encap,ima-evm,keyid:,version,help -- "$@"`
[ $? -ne 0 ] && usage
eval set -- "${ARGS}"
while true
do
	case "$1" in
	-m|--machine)
		MACHINE=$2 && echo "MACHINE: $MACHINE"
		shift;;
	-j|--jobs)
		JOBS=$2 && echo JOBS: $JOBS
		shift;;
	-a|--arch)
		DESTARCH=$(echo $2 | cut -d: -f1)
		ENDIANTYPE=$(echo $2 | cut -d: -f2)
		[ "$ENDIANTYPE" = be ] && endiantype=_be && endianstr=:be
		echo "DESTARCH: $DESTARCH"
		shift;;
	-b|boottype)
		BOOTTYPE=$2 && echo "BOOTTYPE: $BOOTTYPE"
		shift;;
	-c|--component)
		COMPONENT=$2 && echo "COMPONENT: $COMPONENT"
		shift;;
	-f|--cfgfile)
		CONFIGLIST=$2
		[ ! -f $FBDIR/configs/$CONFIGLIST ] && fbprint_e "$FBDIR/configs/$CONFIGLIST does not exist!" && exit 1
		echo "CONFIGLIST: $2"
		shift;;
	-r|--rootfs)
		DISTROTYPE=$(echo $2 | cut -d: -f1)
		DISTROSCALE=$(echo $2 | cut -d: -f2)
		CODENAME=$(echo $2 | cut -d: -f3)
		DISTROSCALEOPT=$(echo $2 | cut -d: -f3)
		if [ $DISTROSCALE = $DISTROTYPE ]; then DISTROSCALE=; fi
		if [ "$CODENAME" = $DISTROTYPE ]; then CODENAME=; fi
		if [ $DISTROTYPE = yocto -o $DISTROTYPE = buildroot ] && [ -z "$DISTROSCALE" ]; then DISTROSCALE=tiny; fi
		if [ $DISTROTYPE != ubuntu -a $DISTROTYPE != debian -a $DISTROTYPE != centos -a $DISTROTYPE != android -a $DISTROTYPE != buildroot -a $DISTROTYPE != yocto ]; then
		    fbprint_e "invalid argument $DISTROTYPE for distro type, valid type: ubuntu, debian, centos, buildroot, yocto"
		    exit 1
		fi
		if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian -o $DISTROTYPE = centos ] && [ -n "$DISTROSCALE" -a "$DISTROSCALE" != main -a \
		     "$DISTROSCALE" != devel -a "$DISTROSCALE" != cloud -a "$DISTROSCALE" != edgescale -a "$DISTROSCALE" != lite -a "$DISTROSCALE" != mate ]; then
		    fbprint_e "invalid $DISTROSCALE for DISTROSCALE argument, valid: main, devel, lite, edgescale, cloud, mate"
		    exit 1
		elif [ $DISTROTYPE = buildroot -o $DISTROTYPE = yocto ] && [ "$DISTROSCALE" != tiny -a "$DISTROSCALE" != devel -a "$DISTROSCALE" != imaevm ]; then
			fbprint_e "invalid $DISTROSCALE for DISTROSCALE argument, valid: tiny, devel, devel:custom, imaevm"
			exit 1
		fi
		echo DISTRO TYPE:  $DISTROTYPE
		echo DISTRO SCALE: $DISTROSCALE
		[ -n "$CODENAME" ] && echo DISTRO CODENAME: $CODENAME
		shift;;
	-i|--instruction)
		INSTRUCTION=$2 && echo "INSTRUCTION: $INSTRUCTION"
		shift;;
	-p|--portfolio)
		PORTFOLIO=$2 && echo "PORTFOLIO: $PORTFOLIO"
		shift;;
	-B|--buildarg)
		BUILDARG=$2 && echo "BUILDARG: $BUILDARG"
		shift;;
	-s|--secure)
		SECURE=y && echo "SECURE: $SECURE";;
	-e|--encap)
		ENCAP=y && SECURE=y && echo "ENCAP: $ENCAP";;
	-t|--ima-evm)
		IMA_EVM=y && SECURE=y && imaevmopt="_imaevm" && echo "IMA_EVM: $IMA_EVM";;
	-k|--keyid)
		KEY_ID=$2 && echo "KEY_ID: $KEY_ID"
		shift;;
	-v|--version)
		fbprint_n $FBVERSION
		exit;;
	-h|--help)
		usage;;
	--)
		shift
		break;;
	esac
shift
done

[ -z "$MACHINE" ] && MACHINE=all
[ "$MACHINE" = "ls1021atwr" ] && DESTARCH=arm32

if [ "$MACHINE" = "imx6qsabresd" -o "$MACHINE" = "imx6sllevk" ] ; then
    DESTARCH=arm32 && PORTFOLIO=imx6
elif [ "$MACHINE" = "imx7ulpevk" ]; then
    DESTARCH=arm32 && PORTFOLIO=imx7
elif [ "$MACHINE" = "imx8mqevk" -o "$MACHINE" = "imx8mmevk" -o "$MACHINE" = "imx8qmmek" -o "$MACHINE" = "imx8qxpmek" ] ; then
    DESTARCH=arm64 && PORTFOLIO=imx8
fi
[ -z "$PORTFOLIO" ] && PORTFOLIO=layerscape

if [ $PORTFOLIO != layerscape -a $PORTFOLIO != LS -a $PORTFOLIO != IMX -a \
    $PORTFOLIO != imx -a $PORTFOLIO != imx6 -a $PORTFOLIO != imx7 -a $PORTFOLIO != imx8 ]; then
    fbprint_e "$PORTFOLIO is invalid, valid -p parameter is: layerscape, imx, imx6, imx7, imx8"; exit 1
fi
if [ $PORTFOLIO = IMX -o $PORTFOLIO = imx -o $PORTFOLIO = imx6 -o $PORTFOLIO = imx7 -o $PORTFOLIO = imx8 ]; then
    SOCFAMILY=IMX
    [ -z "$BOOTTYPE" ] && BOOTTYPE=sd
elif [ $DESTARCH = ppc64 -o $DESTARCH = ppc32 ]; then
    SOCFAMILY=QORIQ
else
    SOCFAMILY=LS
fi

if [ -z "$manifest" ]; then
    if [ -f $FBDIR/configs/board/$MACHINE/manifest ]; then
	manifest=$FBDIR/configs/board/$MACHINE/manifest
    elif [ -z "$MACHINE" -o $MACHINE = all ] && [ $DESTARCH = arm64 -a $SOCFAMILY = LS ]; then
        manifest=$FBDIR/configs/board/ls1043ardb/manifest
    elif [ -z "$MACHINE" -o $MACHINE = all ] && [ $DESTARCH = arm32 -a $SOCFAMILY = LS ]; then
	manifest=$FBDIR/configs/board/ls1021atwr/manifest
    elif [ -z "$MACHINE" -o $MACHINE = all ] && [ $DESTARCH = arm64 -a $SOCFAMILY = IMX ]; then
	manifest=$FBDIR/configs/board/imx8mqevk/manifest
    elif [ -z "$MACHINE" -o $MACHINE = all ] && [ $DESTARCH = arm32 -a $SOCFAMILY = IMX ]; then
	manifest=$FBDIR/configs/board/imx6sllevk/manifest
    elif [ -z "$MACHINE" -o $MACHINE = all ] && [ $DESTARCH = ppc64 -o $DESTARCH = ppc32 ]; then
	manifest=$FBDIR/configs/board/t4240rdb/manifest
    elif [ "$MACHINE" = qemuarm64 -o "$MACHINE" = qemuarm ]; then
	manifest=""
    else
	fbprint_e "not found manifest file for $MACHINE"
	exit 1
    fi
fi
[ -n "$manifest" ] && . $manifest
. $FBDIR/configs/board/common/memorylayout.cfg

if [ $DESTARCH != arm64 -a $DESTARCH != arm32 -a $DESTARCH != ppc64 -a $DESTARCH != ppc32 ]; then
    fbprint_e "$DESTARCH is a invalid argument for -a !"
    exit 1
fi

if [ -z "$CONFIGLIST" ]; then
    if [ -f $FBDIR/configs/build_custom.cfg ]; then
	CONFIGLIST=build_custom.cfg
    elif [ -f $FBDIR/configs/build_lsdk_internal.cfg ]; then
	CONFIGLIST=build_lsdk_internal.cfg
    else
	CONFIGLIST=build_lsdk.cfg
    fi
fi

. $FBDIR/configs/$CONFIGLIST
export CONFIGLIST
. $FBDIR/configs/centos/distro.cfg

if [ -n "`echo $COMPONENT | grep ^linux:`" -a -n "`echo $COMPONENT | cut -d: -f3`" ]; then
    KERNEL_TREE=`echo $COMPONENT|cut -d: -f2`
    KERNEL_BRANCH=`echo $COMPONENT|cut -d: -f3`
else
    if [ $SOCFAMILY = IMX ]; then
	KERNEL_TREE=$default_linux_imx_tree
	KERNEL_BRANCH=$default_linux_imx_repo_branch
    else
	KERNEL_TREE=$default_linux_tree
	KERNEL_BRANCH=$default_linux_repo_branch
    fi
fi

if [ -n "`echo $COMPONENT | grep ^uboot:`" -a -n "`echo $COMPONENT | cut -d: -f3`" ]; then
    UBOOT_TREE=`echo $COMPONENT|cut -d: -f2`
    UBOOT_BRANCH=`echo $COMPONENT|cut -d: -f3`
else
    if [ $SOCFAMILY = IMX ]; then
	UBOOT_TREE=$default_uboot_imx_tree
	UBOOT_BRANCH=$default_uboot_imx_repo_branch
    else
	UBOOT_TREE=$default_uboot_tree
	UBOOT_BRANCH=$default_uboot_repo_branch
    fi
fi

RCW_TREE=$default_rcw_tree
KERNEL_PATH=$FBDIR/packages/linux/$KERNEL_TREE
KERNEL_OUTPUT_PATH=$FBDIR/build/linux/$KERNEL_TREE/$DESTARCH/$SOCFAMILY/output
INSTALL_MOD_PATH=$FBDIR/build/linux/kernel/$DESTARCH/$SOCFAMILY

BIN_FW="fm_ucode qe_ucode phy_cortina phy_inphi pfe_bin ddr_phy_bin dp_firmware_cadence"
LS_MACHINE_LIST=`grep CONFIG_MACHINE_L $FBDIR/configs/$CONFIGLIST |grep y|cut -b 16-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
IMX_MACHINE_LIST=`grep CONFIG_MACHINE_IMX $FBDIR/configs/$CONFIGLIST |grep y|cut -b 16-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
FIRMWARE_REPO_LIST=`grep CONFIG_FW_ $FBDIR/configs/$CONFIGLIST |grep y|cut -b 11-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
FIRMWARE_REPO_LIST="$FIRMWARE_REPO_LIST $BIN_FW"
LINUX_ALL_LIST=`grep CONFIG_KERL_ $FBDIR/configs/$CONFIGLIST |cut -b 13-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
LINUX_REPO_LIST=`grep CONFIG_KERL_ $FBDIR/configs/$CONFIGLIST |grep y|cut -b 13-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
APPS_ALL_LIST=`grep CONFIG_APP_ $FBDIR/configs/$CONFIGLIST |cut -b 12-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
APPS_ALL_LIST=`echo $APPS_ALL_LIST | sed -e 's/optee/optee optee_os optee_client optee_test/' -e 's/edgescale/edgescale edgescale_eds eds_kubelet eds_bootstrap/'`
APPS_REPO_LIST=`grep CONFIG_APP_ $FBDIR/configs/$CONFIGLIST |grep y|cut -b 12-|tr A-Z a-z|cut -d= -f1|tr "\n" " "`
APPS_REPO_LIST=`echo $APPS_REPO_LIST | sed -e 's/optee/optee_os optee_client optee_test/' -e 's/edgescale/edgescale_eds eds_kubelet eds_bootstrap/'`


if [ -z "$DISTROTYPE" ] && [ $DESTARCH = ppc32 -o $DESTARCH = ppc64 ]; then
    DISTROTYPE=buildroot
    [ -z "$DISTROSCALE" ] && DISTROSCALE=tiny
fi

[ -z "$DISTROTYPE" ] && DISTROTYPE=ubuntu

if [ -z "$DISTROSCALE" ] && [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian -o $DISTROTYPE = centos ]; then
    [ $CONFIG_APP_EDGESCALE = y ] && DISTROSCALE=edgescale || DISTROSCALE=main
elif [ -z "$DISTROSCALE" -a $DISTROTYPE = buildroot ]; then
    DISTROSCALE=tiny
fi
if [ -z "$CODENAME" -a $DISTROTYPE = ubuntu ]; then
    [ -n "$distro_codename" ] && CODENAME=$distro_codename || CODENAME=bionic
elif [ -z "$CODENAME" -a $DISTROTYPE = debian ]; then
    CODENAME=stretch
fi

if [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
    [ $DISTROSCALE = mate -a $DESTARCH != arm64 -a $DESTARCH != arm32 ] && fbprint_e "arch $DESTARCH is not supported for ubuntu-mate yet" && exit
    if [ $hostarch = aarch64 -o $hostarch = armv7l ] && [ -f /etc/buildinfo ]; then
	RFSDIR=/; DESTDIR=/
    else
	[ -z "$DISTROSCALE" ] && [ $CONFIG_APP_OPENSTACK_NOVA = y ] && DISTROSCALE=cloud
	[ $DISTROTYPE = ubuntu ] && RFSDIR=$FBDIR/build/rfs/rootfs_${DISTRIB_VERSION}_${SOCFAMILY}_${DESTARCH}_$DISTROSCALE || \
	RFSDIR=$FBDIR/build/rfs/rootfs_${DISTROTYPE}_${CODENAME}_${SOCFAMILY}_${DESTARCH}_$DISTROSCALE
    fi
elif [ $DISTROTYPE = buildroot ]; then
    RFSDIR=$FBDIR/build/rfs/rootfs_buildroot_${SOCFAMILY}_${DESTARCH}${endiantype}_${DISTROSCALE}/target
elif [ $DISTROTYPE = yocto ]; then
    [ $DESTARCH != arm64 -a $DESTARCH != arm32 ] && fbprint_e "arch $DESTARCH is not supported for yocto yet" && exit
    [ $DISTROSCALE = tiny ] && yoctoimgtype=core-image-minimal || yoctoimgtype=core-image-sato
    [ $DESTARCH = arm32 ] && machinetype=qemuarm-poky-linux-gnueabi || machinetype=qemuarm64-poky-linux
    yoctotmpdir=`grep '^TMPDIR =' $FBDIR/configs/yocto/local_${DESTARCH}_${DISTROSCALE}.conf | cut -d' ' -f3 | cut -d'"' -f2`
    yoctotmpdir=`eval echo $yoctotmpdir`
    RFSDIR=$yoctotmpdir/work/$machinetype/$yoctoimgtype/1.0-r0/rootfs
elif [ $DISTROTYPE = centos ]; then
    RFSDIR=$FBDIR/build/rfs/rootfs_centos_${centos_version}_${SOCFAMILY}_${DESTARCH}
elif [ $DISTROTYPE = android ]; then
    RFSDIR=$FBDIR/build/rfs/rootfs_android_${android_version}_${SOCFAMILY}_${DESTARCH}
fi

if [ $DISTROSCALE = edgescale ]; then
    DESTDIR=$FBDIR/build/apps/components_${SOCFAMILY}_${DESTARCH}_edgescale
elif [ $DISTROTYPE = buildroot ]; then
    DESTDIR=$FBDIR/build/apps/components_${SOCFAMILY}_${DESTARCH}_buildroot
elif [ $DISTROTYPE = yocto ]; then
    DESTDIR=$FBDIR/build/apps/components_${SOCFAMILY}_${DESTARCH}_yocto
else
    DESTDIR=$FBDIR/build/apps/components_${SOCFAMILY}_${DESTARCH}_ubuntu
fi

mkdir -p $DESTDIR/etc
mkdir -p $DESTDIR/usr/{bin,include}
mkdir -p $DESTDIR/usr/local/{bin,include,lib}
mkdir -p $FBDIR/build/{firmware,linux,rfs,images}
mkdir -p $FBDIR/packages/rfs/initrd
mkdir -p $FBDIR/logs
mkdir -p $RFSDIR

if [ ! $(echo $JOBS | grep '^[0-9]\{1,2\}$' | grep '^[1-9]') ]; then
   fbprint_e "invalid parameter $JOBS for JOBS, valid range: 1 to 99" && exit
fi

if [ "$COMPONENT" = uboot -o "$COMPONENT" = firmware ]; then
    [ -z "$MACHINE" ] && fbprint_e "please specify -m parameter (machine name or all)" && exit 1
fi

if [ $MACHINE != all ]; then
    if ! grep -q -i MACHINE_${MACHINE}= $FBDIR/configs/$CONFIGLIST; then
	if [ $PORTFOLIO != imx6 -a $PORTFOLIO != imx7 -a $PORTFOLIO != imx8 ] && [ $MACHINE != qemuarm64 -a $MACHINE != qemuarm ]; then
	    fbprint_e "Incorrect machine name: $MACHINE"
	    fbprint_n "Valid LS machine name: $LS_MACHINE_LIST"
	    fbprint_n "Valid i.MX machine name: $IMX_MACHINE_LIST" && exit 1
	fi
    fi
fi

if [ -n "$MACHINE" ]; then
    [ ${MACHINE:0:6} = ls1021 ] && export ARCH=arm && export DESTARCH=arm32
fi
[ $DESTARCH = arm32 ] && export ARCH=arm

if [ $DESTARCH = arm64 -a "$SOCFAMILY" = "LS" ]; then
    KERNEL_CFG=$linux_config_list_arm64
elif [ $DESTARCH = arm32 -a "$SOCFAMILY" = "LS" ]; then
    KERNEL_CFG=$linux_config_list_arm32
elif [ $DESTARCH = arm64 -a "$SOCFAMILY" = "IMX" ]; then
    KERNEL_CFG=$linux_config_list_arm64_imx
elif [ $DESTARCH = arm32 -a "$SOCFAMILY" = "IMX" ]; then
    KERNEL_CFG=$linux_config_list_arm32_imx
elif [ $DESTARCH = ppc64 ]; then
    KERNEL_CFG=$linux_config_list_ppc64
elif [ $DESTARCH = ppc32 ]; then
    KERNEL_CFG=$linux_config_list_ppc32
fi

[ ! -L $FBDIR/build/linux/kernel ] && ln -s $KERNEL_TREE $FBDIR/build/linux/kernel

if [ ! -f $FBDIR/logs/.checkproxydone ]; then
    if ! grep Ubuntu  /etc/issue  1>/dev/null; then
	if [ "$1" != "docker" ]; then
	    fbprint_e "This host is not based on Ubuntu distro, please install docker and run 'flex-builder docker' to build in docker"
	    exit
	fi
    fi
    if ! grep fbubuntu /etc/hosts 1>/dev/null; then
	echo 127.0.0.1   fbubuntu | sudo tee -a /etc/hosts 1>/dev/null
    fi
    check_proxy && touch $FBDIR/logs/.checkproxydone
fi

if [ "$1" = "docker" ]; then
    if ! which docker 1>/dev/null 2>&1; then
	fbprint_e "make sure docker is properly installed on the host machine!"; exit
    fi
    if ! docker ps  1>/dev/null 2>&1; then
	fbprint_e "make sure you can run \'docker ps\' if you are in a docker group"; exit
    fi
    [ $hostarch = x86_64 -o $hostarch = i686 ] && check_binfmt_module
    [ ! -b /dev/loop0 ] && sudo losetup -f
    flexbuild_launch_docker
    exit
fi

[ ! -f $FBDIR/logs/.deppkgdone ] && check_ubuntu_version && check_host_dependent_pkg

tmppath=`realpath $FBDIR/build/linux/kernel`
if [ ${tmppath##*/} != $KERNEL_TREE ]; then
    rm -f $FBDIR/build/linux/kernel
    ln -s $KERNEL_TREE $FBDIR/build/linux/kernel
fi

[ -z "$MACHINE" ] && MACHINE=all
if [ $MACHINE = all -a $SOCFAMILY = LS ]; then
    machinelist=$LS_MACHINE_LIST
elif [ $MACHINE = all -a $SOCFAMILY = IMX ]; then
    machinelist=$IMX_MACHINE_LIST
else
    machinelist=$MACHINE
fi

if [ -z $BOOTTYPE ]; then
    boottypelist="sd nor qspi xspi nand tfa emmc"
elif [ $BOOTTYPE != sd -a $BOOTTYPE != emmc -a $BOOTTYPE != nor -a $BOOTTYPE != qspi -a $BOOTTYPE != xspi -a $BOOTTYPE != nand -a $BOOTTYPE != tfa ]; then
    fbprint_e "invalid boottype: $BOOTTYPE, valid: sd, qspi, xspi, nor, emmc, nand" && exit 1
else
    boottypelist=$BOOTTYPE
fi

[ "$BUILDARG" = uefi ] && BL33TYPE=uefi || BL33TYPE=uboot

if grep -q Microsoft.com /proc/version; then
    ON_WSL=y
else
    ON_WSL=n
fi

case $BUILDARG in
    verbose)
	MAKE_FLAGS=-w;;
    quiet)
	MAKE_FLAGS=-s;;
    keep-going)
	MAKE_FLAGS=-k;;
esac
MAKE="make $MAKE_FLAGS"

export ARCH DESTARCH CROSS_COMPILE FBDIR DESTDIR RFSDIR JOBS COMPONENT MACHINE KERNEL_TREE KERNEL_BRANCH KERNEL_PATH \
       RCW_TREE UBOOT_TREE UBOOT_BRANCH BUILDARG MAKE MAKE_FLAGS KERNEL_CFG INSTALL_MOD_PATH LS_MACHINE_LIST FIRMWARE_REPO_LIST \
       APPS_REPO_LIST APPS_ALL_LIST LINUX_REPO_LIST LINUX_ALL_LIST BIN_FW BOOTTYPE DISTROTYPE DISTROSCALE DISTROSCALEOPT \
       ENDIANTYPE SECURE PORTFOLIO IMX_MACHINE_LIST SOCFAMILY KERNEL_OUTPUT_PATH BL33TYPE DISTRIB_NAME DISTRIB_VERSION \
       FIRMWARE_REPO_LIST LS_MACHINE_LIST ON_WSL

case "$INSTRUCTION" in
    "repo-fetch")
	git_repo_update fetch
	exit;;
    "repo-update")
	git_repo_update latest
	exit;;
    "repo-commit")
	git_repo_update commit
	exit;;
    "repo-tag")
	git_repo_update tag
	exit;;
    "repo-branch")
	git_repo_update branch
	exit;;
esac

[ "$INSTRUCTION" != "mkrfs" ] && check_build_toolchain

if [ "$1" = "all" ]; then
    if [ "$BUILD_LAYERSCAPE_IMAGE" = "y" ]; then
	flex-builder -i autobuild -a arm32 -p layerscape -f $CONFIGLIST
	flex-builder -i autobuild -a arm64 -p layerscape -f $CONFIGLIST
    fi
    if [ "$BUILD_IMX_IMAGE" = "y" ]; then
	flex-builder -i autobuild -a arm32 -p imx -f $CONFIGLIST
	flex-builder -i autobuild -a arm64 -p imx -f $CONFIGLIST
    fi
    exit
elif [ "$1" = "clean" ]; then
    do_clean && exit
fi

if [ -z "$COMPONENT" -a -z "$INSTRUCTION" -a -n "$MACHINE" -a $MACHINE != all ]; then
    if [ -n "$BOOTTYPE" ]; then
	flex-builder -i autobuild -m $MACHINE -b $BOOTTYPE -a $DESTARCH -f $CONFIGLIST
    else
	flex-builder -i autobuild -m $MACHINE -a $DESTARCH -f $CONFIGLIST
    fi
    exit
fi


case "$INSTRUCTION" in
    "mkfw")
	check_machine_boottype
	[ -z "$BUILDARG" ] && BUILDARG=uboot
	if [ "$MACHINE" = "all" ]; then
	    for brd in $LS_MACHINE_LIST; do
		. $FBDIR/configs/board/$brd/manifest
		if [ $brd = ls1012afrwy ]; then
		    generate_composite_firmware_2M $brd $BOOTTYPE $BUILDARG
		    generate_composite_firmware_2M $brd $BOOTTYPE $BUILDARG 512mb
		else
		    if [ $SOCFAMILY = LS ]; then
			generate_qoriq_composite_firmware $brd $BOOTTYPE $BUILDARG
		    elif [ $SOCFAMILY = IMX ]; then
			generate_imx_composite_firmware $brd
		    fi
		fi
	    done
	elif [ "$MACHINE" = "ls1012afrwy" ]; then
	    generate_composite_firmware_2M $MACHINE $BOOTTYPE $BUILDARG
	    generate_composite_firmware_2M $MACHINE $BOOTTYPE $BUILDARG 512mb
	elif [ $SOCFAMILY = LS ]; then
	    generate_qoriq_composite_firmware $MACHINE $BOOTTYPE $BUILDARG
	elif [ $SOCFAMILY = IMX ]; then
	    generate_imx_composite_firmware $MACHINE
	fi
	exit;;
    "mkallfw")
	generate_qoriq_all_firmware
	exit;;
    "mkdistroscr")
	for brd in $machinelist; do
	    generate_distro_bootscr $brd
	done
	exit;;
    "mkflashscr")
	mkimage -T script -C none -d $FBDIR/tools/flash_images.sh $FBDIR/build/images/flash_images.scr
	fbprint_d "$FBDIR/build/images/flash_images.scr"
	exit;;
    "signimg")
	check_machine_boottype
	[ $MACHINE = ls1088ardb_pb ] && machname=ls1088ardb || machname=$MACHINE
	secure_sign_image $machname $BOOTTYPE
	exit;;
    "mkrfs")
	generate_distro_rfs
	exit;;
    "download")
        download_distro_images
        exit;;
    "mkguestrfs")
	gen_ubuntu_ext4rfs
	exit;;
    "packrfs")
	compress_distrorfs
	exit;;
    "packapps")
	compress_app_components
	exit;;
    "mklinux"|"mkitb")
	generate_linux_itb
	exit;;
    "mktoolchain")
	build_distro_rfs_buildroot toolchain $DESTARCH
	exit;;
    "mkbootpartition")
	[ $DESTARCH = ppc64 ] && . $FBDIR/configs/board/t2080rdb/manifest
	generate_bootpartition_tarball
	exit;;
    "auto"|"autobuild")
	flex_autobuild_all
	exit;;
    "auto_build")
        flex_auto_build
        exit;;
    "clean-rfs")
	if [ $DISTROTYPE = yocto ]; then
	    echo cleaning $yoctotmpdir ...
	    sudo rm -rf $yoctotmpdir
	    sudo rm -rf $FBDIR/build/rfs/rootfs_yocto_*
	    fbprint_d "clean $yoctotmpdir"
	elif [ -d $RFSDIR ]; then
	    test -c $RFSDIR/dev/pts/ptmx && sudo umount $RFSDIR/dev/pts
	    test -f $RFSDIR/proc/uptime && sudo umount $RFSDIR/proc
	    sudo rm -rf $RFSDIR
	    fbprint_d "clean distro $RFSDIR"
	fi
	exit;;
    "clean-firmware")
	if [ -d $FBDIR/build/firmware ]; then
	    rm -rf $FBDIR/build/firmware
	    fbprint_d "clean $FBDIR/build/firmware"
	fi
	exit;;
    "clean-linux")
	if [ -d $FBDIR/build/linux ]; then
	    rm -rf $FBDIR/build/linux
	    fbprint_d "clean $FBDIR/build/linux"
	fi
	exit;;
    "clean-apps")
	[ -d $DESTDIR ] && rm -rf $DESTDIR && fbprint_d "clean $DESTDIR"
	exit;;
    "clean")
	do_clean
	exit;;
    "merge-component")
	merge_components
	exit;;
    "list")
	show_lists
	exit;;
    *)
	if [ -n "$INSTRUCTION" ]; then
	    fbprint_e "invalid instruction: $INSTRUCTION"
	    exit
	fi ;;
esac

case $COMPONENT in
    rcw|uboot|u-boot|uefi)
	make -C $FBDIR/packages/firmware $COMPONENT;;
    linux|Linux|kernel|linux:custom)
	if echo $COMPONENT|grep custom; then
	    export BUILDARG=custom
	fi
	make -C $FBDIR linux;;
    linux:*:*|uboot:*:*)
	component=`echo $COMPONENT | cut -d: -f1`
	repo=`echo $COMPONENT | cut -d: -f2`
	branch=`echo $COMPONENT | cut -d: -f3`
	if  [ $component = linux ]; then
	    KERNEL_TREE=$repo && KERNEL_BRANCH=$branch && pkgdir=$FBDIR/packages/linux
	    tmppath=`realpath $FBDIR/build/linux/kernel`
	    if [ ${tmppath##*/} != $KERNEL_TREE ]; then
		rm -f $FBDIR/build/linux/kernel
		ln -s $KERNEL_TREE $FBDIR/build/linux/kernel
	    fi
	    mkdir -p $FBDIR/build/linux/$KERNEL_TREE
	elif [ $component = uboot ]; then
	    UBOOT_TREE=$repo && UBOOT_BRANCH=$branch && pkgdir=$FBDIR/packages/firmware
	fi
	if [ ! -d $pkgdir/$repo ]; then
	    if [ "$repo" = "linux" -o "$repo" = "dash-lts" -o "$repo" = "dash-linux" -o \
		 "$repo" = "u-boot" -o "$repo" = "dash-uboot" ]; then
		cd $pkgdir && git clone $GIT_REPOSITORY_URL/$repo && cd -
	    else
		fbprint_e "Please first clone repository $repo to $pkgdir!" && exit 1
	    fi
	fi
	cd $pkgdir/$repo
	if [ ! -f Makefile ]; then
	    # no need with remotes/origin in case of using tag
	    git checkout remotes/origin/$branch -b $branch 2>/dev/null || git checkout $branch -b $branch
	fi
	if [ "$BUILD_DUAL_KERNEL" = "y" -a -f Makefile ] && \
	   [ "$branch" = "$linux_repo_tag" -o "$branch" = "$linux_repo_branch" -o \
	   "$branch" = "$second_linux_repo_tag" -o "$branch" = "$second_linux_repo_branch" ]; then
	    if git show-ref --verify --quiet refs/heads/$branch; then
		git checkout $branch
	    else
		git checkout remotes/origin/$branch -b $branch 2>/dev/null || git checkout $branch -b $branch
	    fi
	fi
	if ! git branch -a | grep $branch 1>/dev/null && ! git tag | grep $branch 1>/dev/null; then
	   fbprint_e "invalid tag/branch name: $branch"
	   exit 1
	fi
	if git show-ref --verify --quiet refs/heads/$branch; then
	    git checkout $branch
	else
	    git checkout remotes/origin/$branch -b $branch 2>/dev/null || git checkout $branch -b $branch
	fi
	cd $FBDIR && check_linux_config && make $component;;
    atf)
	[ -z "$BUILDARG" ] && BUILDARG=uboot
	[ $BUILDARG != uboot -a $BUILDARG != uefi ] && fbprint_e "invalid -B option: only uboot or uefi is valid for BL33!" && exit 1
	make -C $FBDIR atf;;
    initrd)
	get_prebuilt_initrd;;
    all)
        fbprint_e "invalid component name: all, run 'flex-builder -h' for help"
	exit;;
    apps|initrd|bin_firmware|imx_atf)
	make -C $FBDIR $COMPONENT
	;;
    $COMPONENT)
	[ -z "$COMPONENT" ] && fbprint_e "invalid instruction" && exit
	check_component_valid $COMPONENT
	make -C $FBDIR $COMPONENT;;
    *)
	exit;;
esac
