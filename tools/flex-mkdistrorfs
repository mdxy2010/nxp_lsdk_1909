#!/bin/bash

# Copyright 2017-2019 NXP
#
# SPDX-License-Identifier:      BSD-3-Clause
#
# Author: Shengzhou Liu <shengzhou.liu@nxp.com>
#
#
# utility to generate custom aarch64/armhf/x86 ubutnu/debian userland with
# configurable packages and proprietary components.
#

set -e

VERSION=1.2
ARCH=`uname -m`

usage() {
    echo "usage: flex-mkdistrorfs <arch> <codename> [ <distro-scale> <package-list> ]"
    echo example:
    echo " flex-mkdistrorfs arm64 bionic"
    echo " flex-mkdistrorfs armhf stretch lite additional_packages_list"
    echo " flex-mkdistrorfs amd64 zesty devel"
    exit
}


ARGS=`getopt -a -o vh -l version,help -- "$@"`
[ $? -ne 0 ] && usage
eval set -- "${ARGS}"
while true
do
	case "$1" in
	-v|--version)
		echo $VERSION
		exit;;
	-h|--help)
		usage;;
	--)
		shift
		break;;
	esac
shift
done

[ $# -lt 2 ] && usage

do_distrorfs_first_stage() {
    [ -z "$RFSDIR" ] && RFSDIR=$FBDIR/build/rfs/rootfs_${DISTROTYPE}_${2}_${tarch}_$DISTROSCALE
    [ -f $RFSDIR/etc/.firststagedone ] && echo $RFSDIR firststage exist! && return
    [ -f /etc/.firststagedone -a ! -f /proc/uptime ] && return
    sudo mkdir -p $RFSDIR/usr/bin
    sudo mkdir -p $RFSDIR/lib/modules

    for pkg in binfmt-support qemu-system-common qemu-user-static debootstrap; do
	if ! dpkg-query -l $pkg | grep ii 1>/dev/null; then
	    echo installing $pkg
	    sudo apt-get -y install $pkg
        fi
    done

    if [ $1 = arm64 ]; then
	tgtarch=aarch64
    elif [ $1 = armhf ]; then
	tgtarch=arm
    elif [ $1 = ppc64el ]; then
	tgtarch=ppc64le
    fi

    [ ! -f /usr/sbin/update-binfmts ] && echo update-binfmts not found && exit 1

    if update-binfmts --display qemu-$tgtarch | grep -q disabled; then
	update-binfmts --enable qemu-$tgtarch
	if update-binfmts --display qemu-$tgtarch | grep disabled; then
	    echo enable qemu-$tgtarch failed && exit 1
	else
	    echo enable qemu-$tgtarch successfully
	fi
    fi

    [ ! -f /usr/bin/qemu-${tgtarch}-static ] && echo qemu-${tgtarch}-static not found && exit 1
    [ ! -f /usr/sbin/debootstrap -a $DISTROSCALE != lite ] && echo debootstrap not found && exit 1
    [ $1 != amd64 -a ! -f $RFSDIR/usr/bin/qemu-${tgtarch}-static ] && sudo cp /usr/bin/qemu-${tgtarch}-static $RFSDIR/usr/bin
    sudo mkdir -p $RFSDIR/usr/local/bin
    sudo cp -f $FBDIR/tools/flex-mkdistrorfs $RFSDIR/usr/local/bin/
    sudo cp -f $FBDIR/tools/flex-installer $RFSDIR/usr/local/bin/
    sudo cp -f $FBDIR/packages/rfs/misc/*.sh $RFSDIR/usr/local/bin/

    packages_list=$FBDIR/configs/ubuntu/$4
    [ ! -f $packages_list ] && echo $packages_list not found! && exit 1

    echo additional packages list: $packages_list
    if [ ! -d $RFSDIR/usr/aptpkg ]; then
	sudo mkdir -p $RFSDIR/usr/aptpkg
	sudo cp -f $packages_list $RFSDIR/usr/aptpkg
	if [ $DISTROSCALE != lite ] && [ $DISTROTYPE = ubuntu -o $DISTROTYPE = debian ]; then
	    if `ls $FBDIR/packages/rfs/misc/extrinsic/*.sh 1>/dev/null 2>&1`; then
		sudo cp -f $FBDIR/packages/rfs/misc/extrinsic/*.sh $RFSDIR/usr/aptpkg
	    fi
	    if [ -f $FBDIR/configs/ubuntu/reconfigpkg.sh ]; then
		sudo cp -f $FBDIR/configs/ubuntu/reconfigpkg.sh $RFSDIR/usr/aptpkg
	    fi
	fi
    fi

    if [ -n "$http_proxy" ]; then
	sudo mkdir -p $RFSDIR/etc/apt
	echo "http_proxy = $http_proxy" | sudo tee -a /etc/wgetrc 1>/dev/null
	echo "Acquire::http::proxy \"$http_proxy\";" | sudo tee -a $RFSDIR/etc/apt/apt.conf 1>/dev/null
    fi
    if [ -n "$https_proxy" ]; then
	echo "https_proxy = $https_proxy" | sudo tee -a /etc/wgetrc 1>/dev/null
	echo "Acquire::https::proxy \"$https_proxy\";" | sudo tee -a $RFSDIR/etc/apt/apt.conf 1>/dev/null
    fi

    if [ $DISTROTYPE = ubuntu -a $DISTROSCALE = lite ]; then
	sudo cp -f /etc/resolv.conf $RFSDIR/etc/resolv.conf
    fi

    if [ ! -d $RFSDIR/debootstrap -a $DISTROSCALE != lite -a $DISTROTYPE = ubuntu ] || \
       [ ! -d $RFSDIR/debootstrap -a $DISTROTYPE = debian ]; then
	export LANG=en_US.UTF-8
	sudo debootstrap --arch=$1 --foreign $2 $RFSDIR
	echo "installing for second-stage ..."
	DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANGUAGE=C LANG=C \
	sudo chroot $RFSDIR /debootstrap/debootstrap  --second-stage
	echo "configure ... "
	DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANGUAGE=C LANG=C \
	sudo chroot $RFSDIR dpkg --configure -a
    fi
    if [ $DISTROTYPE = ubuntu ]; then
	sudo cp -f $FBDIR/configs/lsdk/README.LSDK $RFSDIR/etc
	sudo cp -f $FBDIR/configs/lsdk/legal $RFSDIR/etc
    fi
    echo $DISTRIB_NAME,$DISTRIB_VERSION | sudo tee $RFSDIR/etc/.firststagedone 1>/dev/null

    # set U-Boot version info in userland for readable in linux run-time
    ubootversionfile=$FBDIR/build/firmware/u-boot/ls1046ardb/output/ls1046ardb_tfa_defconfig/include/generated/version_autogenerated.h
    if [ -f $ubootversionfile ]; then
	ubootVersion=`head -1 $ubootversionfile | cut -d' ' -f3`
	ubootVersion=`echo $ubootVersion | sed 's/\"//g'`
	echo Bootloader Version: U-Boot $ubootVersion | sudo tee -a $RFSDIR/etc/.firststagedone 1>/dev/null
    fi
    sudo chroot $RFSDIR flex-mkdistrorfs $1 $2 $3 $4
}


do_distrorfs_second_stage() {
    [ -f /etc/buildinfo -a ! -f /proc/uptime ] && return
    packages_list=/usr/aptpkg/$4
    . $packages_list

    # create user and passwd
    if [ ! -d /home/user ]; then
	useradd -m -d /home/user -s /bin/bash user
	gpasswd -a user sudo
	echo -e 'root\nroot\n' | passwd root
	echo -e 'user\nuser\n' | passwd user
	mkdir -p /home/user
	chown -R user:user /home/user
    fi
    # set default hostname
    echo localhost > /etc/hostname

    # set apt sources list to install additional packages
    asl=/etc/apt/sources.list
    if [ $DISTROSCALE != lite -a $DISTROTYPE = ubuntu ]; then
	rm -f $asl
	if [ $ARCH = "x86_64" -o $ARCH = "i686" ]; then
	    fn=archive; pn=ubuntu;
	else
	    fn=ports; pn=ubuntu-ports;
	fi
	echo deb http://us.$fn.ubuntu.com/$pn/ $2 main >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates main >> $asl
	echo deb http://$fn.ubuntu.com/$pn $2-security main >> $asl

	if [ $3 = devel ]; then
	    # some packages need to be installed from universe/multiverse
	    echo deb http://us.$fn.ubuntu.com/$pn/ $2 universe >> $asl
	    echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates universe >> $asl
	    echo deb http://us.$fn.ubuntu.com/$pn/ $2 multiverse >> $asl
	    echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates multiverse >> $asl
	fi
    elif [ $DISTROSCALE != lite -a $DISTROTYPE = debian ]; then
	rm -f $asl
	echo deb [arch=$1] http://mirrors.kernel.org/debian/ $2 main >> $asl
    fi

    DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANGUAGE=C LANG=C \
    apt-get -y update

    if [ $DISTROTYPE = ubuntu -a $DISTROSCALE != lite ]; then
	localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
	export LANG=en_US.utf8
	if ! dpkg-query -W language-pack-en-base 1>/dev/null; then
	    echo installing language-pack-en-base ..
	    DEBIAN_FRONTEND=noninteractive LC_ALL=C LANGUAGE=C LANG=C \
	    apt-get -y install language-pack-en-base
	fi
    fi
    apt-get -y upgrade

    test -f /proc/uptime || mount -t proc proc /proc
    test -f /dev/pts/ptmx || mount -t devpts devpts /dev/pts

    # Add additional packages from main repo for user's convenience
    [ $DISTROSCALE = lite ] && pkglist=$additional_lite_packages_list || pkglist=$additional_main_packages_list
    echo installing additional packages: $pkglist
    for pkg in $pkglist; do
	echo Installing $pkg ...
	DEBIAN_FRONTEND=noninteractive apt-get -y install $pkg || true
    done
    echo installed additional packages.

    if [ $DISTROTYPE = ubuntu -a $DISTROSCALE = devel ]; then
	# install more packages for devel userland
	echo installing packages for devel userland: $additional_devel_packages_list
	for pkg in $additional_devel_packages_list; do
	    echo installing $pkg ...
	    DEBIAN_FRONTEND=noninteractive apt-get -y install $pkg || true
	done
	echo installed additional packages for devel userland.

	# install python lib six depended by building ovs-dpdk locally
	if ! pip show -q six; then
	    pip install six;
	fi
    fi

    if [ $DISTROTYPE = ubuntu -a $DISTROSCALE = cloud ]; then
	# install dependent packages for openstack_nova
	echo installing packages for openstack_nova: $openstack_dependent_packages_list
	for pkg in $openstack_dependent_packages_list; do
	    echo installing $pkg ...
	    DEBIAN_FRONTEND=noninteractive apt-get -y install $pkg || true
	done
	echo installed openstack_nova dependent packages.
    fi

    # install extrinsic packages which is needed but not provided yet from official ubuntu
    if [ $DISTROSCALE != lite ]; then
	pkglist=`cd /usr/aptpkg && ls *.sh`
	for pkg in $pkglist; do
	    pkgn=${pkg%.*}
	    if [ -n "$extrinsic_packages_list" ] && [ `echo $extrinsic_packages_list | grep -E $pkgn` ]; then
		echo installing extrinsic package $pkgn ...
		/usr/aptpkg/$pkg
	    fi
	done
    fi

    # clean cached packages
    apt-get clean

    # allow to install non-main packages by users themselves on target board
    if [ $DISTROTYPE = ubuntu ] && ! `grep universe $asl 1>/dev/null`; then
	echo deb http://us.$fn.ubuntu.com/$pn/ $2 universe >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates universe >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2 multiverse >> $asl
	echo deb http://us.$fn.ubuntu.com/$pn/ $2-updates multiverse >> $asl
	apt-get update
    fi

    if [ $1 = arm64 ]; then
	sysarch=aarch64-linux-gnu
    elif [ $1 = armhf ]; then
	sysarch=arm-linux-gnueabihf
    fi

    if [ $1 = arm64 -o $1 = armhf ]; then
	cd /usr/lib && ln -sf $sysarch/libcunit.so libcunit.so
	cd /lib/$sysarch && ln -sf  ../../usr/lib/$sysarch/libxml2.so libxml2.so

	[ $DISTROSCALE != lite ] && ln -sf libz.so.1 libz.so && \
	ln -sf ../../usr/lib/$sysarch/libpcap.so libpcap.so && \
	ln -sf ../../usr/lib/$sysarch/libnuma.so libnuma.so && \
	ln -sf ../../usr/lib/$sysarch/libssl.so libssl.so && \
	ln -sf ../../usr/lib/$sysarch/libcrypto.so.1.1 libcrypto.so.1.1 && \
	ln -sf ../../usr/lib/$sysarch/libcrypto.so libcrypto.so && \
	ln -sf ../../usr/lib/$sysarch/liblua5.3.so  liblua.so && \
        cd /usr/lib/$sysarch && \
        ln -sf ../../../lib/$sysarch/librt.so.1 librt.so && \
        ln -sf ../../../lib/$sysarch/libm.so.6 libm.so && \
        ln -sf ../../../lib/$sysarch/libpam.so.0 libpam.so && \
        ln -sf ../../../lib/$sysarch/libdl.so.2 libdl.so && \
        ln -sf ../../../lib/$sysarch/libutil.so.1 libutil.so

	cd /usr/lib/$sysarch && \
	ln -sf ../../../lib/$sysarch/libtinfo.so.5 libtinfo.so
    fi

    [ -f /usr/bin/sudo -a ! -u /usr/bin/sudo ] && chmod +s /usr/bin/sudo
    [ -d /var/cache/man ] && chown -R man:root /var/cache/man

    # some shared libraries locate in /lib/aarch64-linux-gnu(or /lib/arm-linux-gnueabihf) and /usr/local/lib
    echo export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/$sysarch:/lib/$sysarch >> /etc/profile

    # set proper tty rows and column to match actual window to have vim work fine
    echo tsize.sh >> /etc/profile

    tmpusr=`ls -t /home | cut -d' ' -f1 | head -1`
    [ -d /home/$tmpusr -a "$tmpusr" != "user" ] && rm -rf /home/$tmpusr
    [ $DISTROSCALE != lite -a $DISTROTYPE = ubuntu ] &&	/usr/aptpkg/reconfigpkg.sh

    setup_distribution_info $3
    test -c /dev/pts/0 && umount /dev/pts
    test -f /proc/uptime && umount /proc

    echo APT Packages List: > /etc/packages.list
    echo -e "Package\t Version\t Download-Size\t APT-Sources" >> /etc/packages.list
    apt list --installed | cut  -d/ -f1 | xargs apt show | \
	grep -E '^Package:|^APT-Sources:|^Version:|^Download-Size:'  > packagelist
    lnum=`wc -l packagelist |cut -d' ' -f1`
    for((i=1; i<$lnum;)); do
	t=$[ $i + 3 ]
	sed -n "${i},${t}p"  packagelist | grep -E 'Package:|APT-Sources:|Version:|Download-Size:' | \
	tr "\n" " "  | cut -d' ' -f2,4,6,7,9,10 >> /etc/packages.list
	i=$[ $i + 4 ]
    done
    rm -f packagelist
}

setup_distribution_info () {
    distroname=`head -1 /etc/.firststagedone | cut -d, -f1`
    distroversion=`head -1 /etc/.firststagedone | cut -d, -f2`
    distroversion=${distroversion:4:4}
    releaseversion="$distroname $distroversion (based on ${DISTROTYPE}) ${tarch} ${DISTROSCALE}"
    releasestamp="Build: `date +'%Y-%m-%d %H:%M:%S'`"
    echo $releaseversion > /etc/buildinfo
    sed -i "1 a\\$releasestamp" /etc/buildinfo
    if grep U-Boot /etc/.firststagedone 1>/dev/null 2>&1; then
	tail -1 /etc/.firststagedone >> /etc/buildinfo
    fi

    if [ $DISTROTYPE = ubuntu ]; then
	echo $distroname $distroversion $1 > /etc/issue
	echo $distroname $distroversion $1 > /etc/issue.net

	tgtfile=/etc/lsb-release
	echo DISTRIB_ID=NXP-LSDK > $tgtfile
	echo DISTRIB_RELEASE=$distroversion >> $tgtfile
	echo DISTRIB_CODENAME=bionic >> $tgtfile
	echo DISTRIB_DESCRIPTION=\"$distroname $distroversion $1\" >> $tgtfile

	tgtfile=/etc/update-motd.d/00-header
	echo '#!/bin/sh' > $tgtfile
	echo '[ -r /etc/lsb-release ] && . /etc/lsb-release' >> $tgtfile
	echo 'printf "Welcome to %s (%s %s %s)\n" "$DISTRIB_DESCRIPTION" "$(uname -o)" "$(uname -r)" "$(uname -m)"' >> $tgtfile

	tgtfile=/etc/update-motd.d/10-help-text
	echo '#!/bin/sh' > $tgtfile
	echo 'printf "\n"' >> $tgtfile
	echo 'printf " * Support:        https://www.nxp.com/lsdk\n"' >> $tgtfile
	echo 'printf " * Documentation:  https://lsdk.github.io/document\n"' >> $tgtfile
	echo 'printf " * Licensing:      https://lsdk.github.io/eula\n"' >> $tgtfile

	tgtfile=/usr/lib/os-release
	echo NAME=\"$distroname\" > $tgtfile
	echo VERSION=$distroversion >> $tgtfile
	echo ID=lsdk >> $tgtfile
	echo PRETTY_NAME=\"$distroname $distroversion $1\" >> $tgtfile

	rm -f /etc/default/motd-news
	rm -f /etc/update-motd.d/50-motd-news
    fi
}


if [ -z "$DISTROTYPE" ] && [ $2 = jessie -o $2 = stretch ]; then
    DISTROTYPE=debian
elif [ -z "$DISTROTYPE" ] && [ $2 = xenial -o $2 = bionic ]; then
    DISTROTYPE=ubuntu
fi

# $DISTROSCALE can be main, lite, devel, edgescale, cloud for various scenario of use cases
[ -z "$3" ] && DISTROSCALE=main || DISTROSCALE=$3
[ -z "$4" ] && packagelist=additional_packages_list || packagelist=$4
[ $1 = armhf ] && tarch=arm32 || tarch=$1

do_distrorfs_first_stage $1 $2 $DISTROSCALE $packagelist

if [ $ARCH = aarch64 -o $ARCH = armv7l ] && [ ! -f /proc/uptime ]; then
    do_distrorfs_second_stage $1 $2 $DISTROSCALE $packagelist
fi
